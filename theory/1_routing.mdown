# Routing and indexers

06.12.2017


## Introduction

CSwitch serves as an infrastructure for the transfer of communication and
funds. To be able to send messages in the graph of neighbors or to send funds
in the graph of friends, we need to be able to find routes between
nodes. Routes are chains of neighbors or friends.

Finding routes between nodes in a distributed setting (Every node only knows his
immediate graph neighbors) is a difficult problem. We never managed to find a
solution to this problem that is both distributed and efficient. Currently we
do not know of any method of distributed routing that scales well.

The naive solution for this problem is flooding: Every node passes the message
to all the nodes that he knows of, until the message arrives at all nodes.
Specifically, the message also arrives at its destination.

The method of routing by flooding is very inefficient, and can not be used in
CSwitch, as CSwitch should be an efficient communication infrastructure.

Other methods were tested as part of the freedomlayer project. Those attempts
are outside of the scope of this document, and can be read at the 
[Freedomlayer research section](https://www.freedomlayer.org/pages/research.html).
At the time of writing this document, none of those methods allow practical
distributed routing.


## Introducing Indexers

Instead of using distributed routing, we plan to use a more centralized
approach to routing. Finding routes in the network will be given to nodes as a
service that costs credit.

The nodes that give routing services are called **indexers**. A few indexers
might belong to one **indexing provider**. Indexers that belong to one indexing
provide collabarate and together index the whole connected component of the
CSwitch network they reside in.

Whenever a node A wants to send a message to some remote node B, A will first
send a request for route to B to an indexer node I. The indexer I will send
back to A a response message containing a few possible routes to B. Using these
routes, A will be able to send a message to B. (The response from I to A will
possibly include a recent communication public key of B. This will allow A to
perform a static diffie-hellman exchange with B, saving one roundtrip time).

The request that A sends to an indexer I goes over CSwitch's communication
layer, between neighbors. It contains extra credit for:

- Processing of the path finding.
- Allocating bytes for the indexer response.

These types of extra credit inside communication messages (processing fee, fee
for response bytes allocation) are part of the specification for a message in
the communication layer between friends, and could be used for other purposes
by users of the CSwitch infrastructure.

To index the network, the an indexer I will occasionaly send a node A an
inquiry asking for the following:

- A set of current neighbors
- A set of current friends, and current funds capacities to those friends (How
    much funds could be pushed to each friend), and whether those friends are
    online.
- A current communication public key, that could be used for a fast half-static
    diffie-hellman exchange with another node. (TODO: Should we have this?)

This inquiry from the indexer I to the node A will be sent as a paid request
over the communication layer. It will include processing fees and extra credits
for the allocation of response bytes. This makes the inquiry worth responding
to. (TODO: How to deal with false responses?)

As a simplistic example, an indexing provider could consist of a single indexer
I that works alone, asking all the nodes in the network for their set of
neighbors and friends. Whenever a request for route (of neighbors or friends)
is sent to the indexer, the indexer will find the routes using classic graph
theory algorithms and return a response to the requesting node.

In the past we proposed an indexing method in which every node picks a few
close indexers, and reports to them changes to his set of neighbors or friends
whenever such changes happen. This has the advantage of saving bandwidth,
comparing to the above network of periodically requesting the current sets of
neighbors and friends. However, using this method causes a lock in to one
indexing provider.  New emerging indexing providers will not be able to
start operating, because they will lack adoption of users, hence they will not
be able to get the information required to index the CSwitch network.

As mapping the whole network could be bandwidth consuming for a single node, an
indexing provider could use multiple indexer nodes. Then the work of indexing
the network could be divided by regions: Every indexer from the group will be
responsible to obtain up to date information for some part of the CSwitch
network. The information is then exchanged between the indexer nodes. 

An indexing provider could use indexer nodes with a proprietary implementation.
The indexer nodes belonging to one indexing provider may even communicate outside
the CSwitch network, possibly for efficiency reasons. For example, the indexers
belonging to one indexing provider might be connected directly, or communicate
using TCP over the Internet. Of course they may also communicate over the
CSwitch network.


## Allowing Open market of indexing providers

CSwitch aims to be a decentralized communication infrastructure. Having a
single entity used for indexing could introduce a single point of failure.
If this entity will stop working for some reason, communication and funds
transfer in the CSwitch network will not be possible.

Therefore the CSwitch supports the participation of multiple indexing
providers. An indexing provider is a single economic entity (with aligned
incentives) that provides indexing services to nodes on the CSwitch network in
exchange for credit. It should be profitable for an indexing provider to
operate, or it will soon be out of business.

Operating an indexing service inccurs costs for the following:

- Periodic collection of updated information about the network topology (The
    graphs of neighbors and friends). 
- Equipment for storage of the current CSwitch network state.
- Power used for computation of routes in the stored network state. 
- Communication between different indexers belonging to the same indexing service.


A CSwitch client contains a list of trusted indexing providers used for
requests for routes. This list is configurable by the user of the client. Every
user of the CSwitch network may pick the indexing providers he trusts and is
willing to buy service from. This list is somewhat similar in its role to
the list of trusted certificate authorities in a user's browser.


Some open questions regarding the list of trusted indexing providers:

- How can a non savvy user pick a list of trusted indexing providers?
- What list will we provide as default?
- Is this going to make it harder for new indexing providers to emerge? What
    can we do about this?


Nodes in the CSwitch network communicate with indexers using a standard
protocol. This protocol satisfies the following requirements:

- A node in the CSwitch network should be able to discover in a secure manner a
    route to a close indexer that is part of any indexing provider he trusts.

- An indexing provider should be able to update his set of indexer nodes, and
    to notify nodes in the network about this change in a secure manner.


In the following sections we describe a standard protocol between CSwitch
nodes and indexers.



## Authenticity of indexer nodes

Consider a node A in the CSwitch network that uses the services of an indexing
provider IndP. A needs a method of discovering routes to indexer nodes
belonging to IndP, to be able to get service from those indexer nodes.

This is done as follows: some indexer node I of IndP sends a message to the
node A, somehow stating that the indexer node I belongs to IndP, and giving A a
route to the indexer node I. Then whenever A wants to request a route to some
remote node, A will send a route request to I.

How can A be sure that I belongs to IndP? We could use here the traditional
method of [digital certificates](https://en.wikipedia.org/wiki/Public_key_certificate),
having the indexing provider IndP represent a certificate authority.
IndP will have a root public key. Using this key it will issue a digital
certificate, signed for a limited period of time, to each of his indexer nodes.

Using this method an indexer I could show the node A his up to date
certificate signed by IndP. A will then believe that I is a legitimate indexer
node belonging to the indexing provider IndP.

If any indexer node E needs to be revoked (Maybe it was somehow taken over), the
certificate authority IndP will not renew the indexer's certificate. After
enough time passes, E's certificate will expire, and E will not be able to
convince nodes in the CSwitch network that he is a legitimate indexer node
belonging to IndP.

A main drawback to the traditional method of digital certificates is the
dependence on synchronized time system. If a node A in the CSwitch network is to
verify an indexer node digital certificate, it is a required that A knows a
good approximation of the current time.

Therefore we choose a different method for an indexer node to prove his
belonging to an indexing provider. We use a system of **states chain**.

One link in an indexing provider states chain is of the following form:

- previousStateHash             [32 bytes]

- newOwnersPublicKeys
    - newOwnerPublicKey{0},     [32 bytes]
    - newOwnerPublicKey{1},
    - ...
    - newOwnerPublicKey{m-1}, 

- newIndexersPublicKeys
    - indexerPublicKey{0}       [32 bytes]
    - indexerPublicKey{1}
    - ...
    - indexerPublicKey{t-1}

- signaturesByOldOwners
    - signature{1}              [64 bytes]
    - signature{2}
    - ...
    - signature{r-1}


previousStateHash is the hash (Sha512/256) of the previous state.
newOwnerPublicKeys is a list of the new owners of the indexing provider. Each
owner has a public key.

newIndexersPublicKeys is a list of public keys for indexers belonging to the
indexing provider.

signaturesByOldOwners is a list of signatures by the old owners of the indexing
provider over the new state of the indexing provider. The signatures is over
all the previous fields: previousStateHash, newIndexersPublicKeys and
newOwnersPublicKeys. 

The first link in a chain could have a random value for previousStateHash.

To provide a canonical form for a link in the states chain, each of the lists
(newOwnersPublicKeys and signaturesByOldOwners) is sorted. Note that only
sorted canonical forms should be accepted. This is to make sure the hashes of
chain links are consistent.

A new link in an indexing provider states chain is valid only if signatures of
at least 2/3 of the old owners are present and valid.


# Updating states chain protocol

A node A that uses the services of indexing provider
IndP should always know some recent link (also named: state) in the states chain
of the indexing provider. A recent state allows the node A to know the list of
legitimate indexer nodes belonging to IndP.

The following messages are used to keep CSwitch nodes up to date with the
recent state of their indexing providers:


**RequestUpdateState** (Indexer -> Node)

- indexingProviderID [16 bytes]
- indexingProviderStatesChain


**ResponseUpdateState** (Node -> Indexer)

- knownIndexingProviderStateHash [32 bytes]


**RoutesToIndexers** (Indexer -> Node)

- routesToIndexers: List of:
    - List(PublicKey)
    - appPort                   [32 bytes]
- requestPrice                  [8 bytes]


RequestUpdateState message is sent from an Indexer (belonging to indexing
provider IndP) to a node in the CSwitch network. It states the indexing
provider name and the few last links the states chain of the indexing provider
(Possibly 0 links). 

The receiving node, A, will update his known last link of the chain, given
that all the new links are valid. The node A then responds with a
ResponseUpdateState, containing his new value of last link of the states chain. 

It is possible that the value of the last state of the chain that A keeps could
be left unchanged. This could happen if A already had the most recent link of
the chain, or in case the indexer has sent invalid new links.

After the indexing provider has made sure the remote node A knows the current
state of the indexing provider, he can send a RoutesToIndexer message to the
node A through any indexer node. This message will provide routes to one or
more indexers belonging to the indexing provider IndP.

The node A can verify that an indexer belongs to the indexing provider IndP by
looking at his current state of the indexing provider IndP, in the list of
newIndexersPublicKeys.

The RoutesToIndexers message is sent from an Indexer node to a node,
specifiying a list of routes to indexer nodes, and the price of a request for
routes.

Every route also contains appPort. This port should be used as
PluginManagerPort(addPort) by the node when sending messages to the destination
indexer node. The indexer node logic will always be behind the PluginManager,
therefore only this type of destination port is supported.


TODO: How to deal with changes of requestPrice? Will the Indexer node still
accept the old price for a while? 


## Information collection by indexers

Information about the network topology may be collected using the following
protocol messages:


**RequestNodeNeighborsInfo** (Indexer -> Node::Networker)

- (empty)


**ResponseNodeNeighborsInfo** (Node::Networker -> Indexer)

- connectedNeighborsList


**RequestNodeFriendsInfo** (Indexer -> Node::Funder)

- (Empty)


**ResponseNodeFriendsInfo** (Node::Funder -> Indexer)

- connectedFriendsList (with available capacities)



Note that the indexer I sending the RequestIndexerInfo message does not need to
identify himself against the receiving node A. The indexer I may belong to an
indexing provider that A is not associated with. The message RequestIndexerInfo
can also be sent by nodes that are not indexers (TODO: Privacy implications of
this?)

Nodes are incentivized to respond to RequestNodeXYZ messages. Those
messages are sent over the communication channel (between neighbors) and they
contain a promise for credit. However, there is no guarantee that the responses
to those messages contain true information. (TODO: What are the implications of
this?)


## Requesting information from indexer nodes

A node in the CSwitch network may send a request to any indexer node,
requesting either a route between neighbor or a route between friends.
The following messages are used for issuing such requests:


**RequestNeighborsRoute** (Node -> Indexer)

- sourceNodePublicKey
- destinationNodePublicKey


**ResponseNeighborsRoute** (Indexer -> Node)

- routes: List of:
    - List(PublicKey))
- destinationCommPublicKey
- destinationRecentTimestamp


**RequestFriendsRoute** (Node -> Indexer)

- one of:
    - Direct
        - sourceNodePublicKey
        - destinationNodePublicKey
    - LoopFromFriend 
        - friendPublicKey
    - LoopToFriend
        - friendPublicKey


**ResponseFriendsRoute** (Indexer -> Node)

- routes: List of:
    - capacity
    - List(PublicKey)



Consider for example the message RequestNeighborsRoute (The message
RequestFriendsRoute is similar). The request contains sourceNodePublicKey and
destinationNodePublicKey. This means that the sending node is requesting routes
between neighbors that begin from the source node and end with the
destination node.

RequestFriendsRoute contains extra options. The first option is the Direct
route, which is similar to the RequestNeighborRoute message: A request for a
route that begins with beings and ends with the specified nodes.

The second option, LoopFromFriend, requests a route in the shape of a loop
beginning from the requesting node through a given friend, back to the
requesting node. This can be used for money rebalance when we owe the friend
money.

```
requestingNode -> friend -> ... -> ... -> requestingNode
```

The third option, LoopToFriend, requests a route in the shape of a loop
beginning from the requesting node through a given friend, back to the
requesting node. This can be used for money rebalance when the friend owes us
money.

```
requestingNode -> ... -> ... friend -> requestingNode
```

Note that both of those methods will not work if the provided loop is of the
following form:

```
requestingNode -> friend -> requestingNode
```


For example, if a node A is planning to unfriend another node B, he may first
push flow of credit through B back to himself, to acheive balanced credit
between A and B. Then A can unfriend B without leaving an unsettled debt.

This method of balancing debts is not relevant for the communication layer
(between neighbors), where rebalancing can be done by sending funds on the
funds layer (between friends).



TODO:

- How often should indexers collect information about the network?
- What happens if collected information is not up to date?
        - A communication (neighbors) route that is not up to date?
        - A funds route (friends) that is not up to date?

