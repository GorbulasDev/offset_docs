# Linear pricing
29.04.2018

## Introduction

Credit switching allows a node to send a message together with funds to a
remote node. A naive approach will promise each of the mediators a constant
amount of credits as compensation. However, the costs for sending messages for
every mediator might vary. In other words, for some mediator passing messages
might be more expensive than to others. We present here a method of pricing
messages passing called linear pricing.

This method of linear pricing should apply both to the Neighbors (Networker)
and Friends (Funder) layers.


## Basic linear pricing

Consider the following topology between two neighbors:

```
B -- C
```

Assume that the node B sends a request message (RequestSendMessage or
RequestSendFund) to the node C, expecting a response message.

We make the assumption that sending data incurs costs only to the sender.
Following this assumption we have two directions for pricing considerations:

- Sending data from B to C, which incurs costs to B.
- Sending data from C to B, which incurs costs to C.

We choose the following model for costs: 

- Sending x bytes from B to C will cost B {BC}_b + x * {BC}_r credits.
- Sending x bytes from C to B will cost C {CB}_b + x * {CB}_r credits.

We call the `b` value **base**, and the `r` value **multiplier**. Note that we
have one base and one multiplier for every direction.

The values {BC}_b and {BC}_r are determined by the node B, as B should know how
much it costs him to send a message to C. In the same manner, the values
{CB}_b, and {CB}_r are determined by C.


We choose this model for simplicity. It could be true that the costs for
sending a message from B to C is not linear with respect to the amount of bytes
sent, but we assume that this formula could be used as a reasonable
approximation in most cases.


We present here two simpler alternative models, and explanations for why we
chose not to use them:

1. Constant cost for sending any message, regardless of its size. 

This is a simple model, however, we do believe that in most cases sending
larger messages will be more expensive.

2. Having only the multiplier value for every direction. This means that
   sending a message of size x bytes will cost `r * x` for some constant r. 

This solution does not consider that in some cases sending empty messages also
costs something to the sender. This is mostly true in cases where the
communication is built upon another communication layer. For example: the
Funder communication which is implemented over the Networker communication.


## Notifying about pricing changes

For a node B with a neighbor/friend node C, the amounts {BC}_b, {BC}_r can be
configured by B. Whenever B changes any of the values {BC}_b or {BC}_r, B
should notify the node C and also notify an Indexer. 

Note that notifying an Indexer is not done actively. On the next time an
Indexer communicates with B, B will notify of the changes to the values {BC}_b
and {BC}_r.

Notifications about changes to {BC}_b and {BC}_r sent from B to C are sent as a
token channel message. After receiving this message, C must not pass messages
through C that do not comply with the new {BC}_b, {BC}_r values. Attempt to do
so will result in a token channel inconsistency.

Note that as B advertises the values {BC}_b and {BC}_r both to his
neighbors/friends and to Indexers, it is possible that those values will be out
of sync for a while. 

```
T -- B -- C -- R
```

If for example the node T attempts to send a message to node R through the
edge `B -- C` with proposal that is too low, B will return an error message
back to T. If, on the other hand, the proposal is too high, the message will be
passed.

Therefore the node T can always send messages with a payment proposal that is a
bit higher than the one obtained by the Indexer. This will increase the odds of
having the message pass along the full path to its destination, despite
possible out of sync base and multiplier values.


## Payment proposal in request message

TODO: Explain how payment proposal should be inserted into a request message.
(Along the path of nodes).

During the sending of a request message, the source node should specify
proposals for the request and response base and multiplier values for every
node along the chain. The following diagram demonstrates the required proposal
values for sending a message from the node A to the node E:

```
         req    req,res  req,res    res
  A  --   B   --   C   --   D   --   E   

```

In the diagram, req means the pair (requestBaseProposal,
reqMultiplierProposal). res means the pair (responseBaseProposal,
responseMultiplierProposal). The node A does not need to specify proposals for
B's response{Base|Multiplier} values, because he already knows them. B has sent
those values on the token channel between A and B.

Also, the node A does not need to specify proposal values for
request{Base|Multiplier} for the node E, because E does not issue any request
message to a next node. He only sends a response message back to the node D.

We construct the messages containing the proposals as follows (Example for
Networker Layer):

```
struct NeighborRouteLink {
        nodePublicKey: CustomUInt256;
        requestBaseProposal @1: UInt32;
        requestMultiplierProposal @2: UInt32;
        responseBaseProposal @3: UInt32;
        responseMultiplierProposal @3: UInt32;
}
```

```
struct NeighborsRoute {
        sourcePublicKey: CustomUInt256;
        routeLinks @0: List(NeighborRouteLink);
        destinationPublicKey: CustomUInt256;
}
```

Note that NeighborRoute contains the source and destination public keys
separately. This is a "trick" we use to make sure the amount of proposal
payment values are always correct. For a route of length `n` (Including the
source and destination) we expect to have exactly `n-2` pairs of request
payment proposals and `n-2` pairs of response payment proposals. 

We store those values as follows:

```
|source|====== routeLinks =======|destination|
|      |                         |           |
          req      req      req
          res      res      res
   A  --   B   --   C   --   D   --   E   
```

Where in fact, those values should be distributed as follows:

```
          req      req      req
                   res      res      res
   A  --   B   --   C   --   D   --   E   
```

In other words, `routeLinks[i].responseBaseProposal` is actually the
responseBaseProposal for the node of index `i+1` in the routeLinks array.

We could use a few lists instead, but then we would have to verify that the
lists are always of equal length.


```
struct RequestSendMessageTran {
        requestId @0: CustomUInt128;
        route @1: NeighborsRoute;
        requestContent @2: Data;
        maxResponseLength @3: UInt32;
        processingFeeProposal @4: UInt64;
        creditsPerByteProposal @5: UInt64;
}
```

The values for request/response Base/Multiplier proposal are obtained during a
request for route from the Indexer. The Indexer should return the route
together with those values. 

It is reasonable to use slightly higher values than the ones that were supplied
by the Indexer, because changes might have happened since the last time those
values were obtained.

When a node receives a RequestSendMessage, before he passes it to the next node
he should first verify: 

- The request{Base|Multiplier} values for the current node are high enough.
- The response{Base|Multiplier} values for the next node are high enough. 

If any check fails, an error message should be returned to the previous node on
the route.


## Compensation for intermediate nodes

Assume that a node B wants to send a message to a node F.
B first requets a route to the node F from an Indexer. B then receives the
following route from the Indexer:

```
B -- C -- D -- E -- F
```

Together with linear pricing for sending bytes on all the relevant edges of the
route:

```
          req      req      req
                   res      res      res
   B  --   C   --   D   --   E   --   F   
```

B should already know the pricing for response from C because B is a direct
neighbor of C, and C should have sent this information on the token channel
with B.

Consider sending a message from B to F along the route specified above.

For a successful delivery, the node C should receive:

```
{CD}_b + request_len * {CD}_r
    + {CB}_b + (response_len + max_failure_len) * {CB}_r 
```

credits. Here `request_len` is the length of the
request message, including all the fields. `response_len` is the length of
the response message, including all the fields. `max_failure_len` is the
maximum possible length of a failure message. Recall that the failure message
contains signatures of all nodes until the reporting node, therefore
`max_failure_len` depends on the length of the route.


For a failed delivery reported by C, the node C should receive:

```
{CB}_b + failure_len * {CB}_r
```

credits, where `failure_len` is the length of the failure message
including all fields.

For a failed delivery reported by D or E, the node C should receive:

```
{CD}_b + request_len * {CD}_r 
    + {CB}_b + failure_len * {CB}_r 
```


The same compensation formula can be calculated for the nodes D and E which
fulfil a similar job in passing the message. The node destination node F has a
different compensation formula.

Note that the expression `response_len + max_failure_len` has the job of being
larger than each of the summands. We could have been chosen `max(response_len,
max_failure_len) + 1` instead. However, we chose to use a summation formula
because it makes analysis easier. For example, see the calculations in the next
section.


For a successful delivery, F should receive:

```
processing_fee 
    + {FE}_b + max_response_len * {FE}_r +
    + (max_response_len - response_len) * ({CB}_r + {DC}_r + {ED}_r) 
```

credits. `max_response_len` is the maximum possible response length set by the
source of this message (B). Recall that F can not issue a failure message.


## Costs of sending a message

Consider again the following topology:

```
B -- C -- D -- E -- F
```

The total amount of credits paid by the source (B) is the sum:

```
Total{BF} := 

{CD}_b + request_len * {CD}_r
    + {CB}_b + (response_len + max_failure_len) * {CB}_r 

+ {DE}_b + request_len * {DE}_r
    + {DC}_b + (response_len + max_failure_len) * {DC}_r 

+ {EF}_b + request_len * {EF}_r
    + {ED}_b + (response_len + max_failure_len) * {ED}_r 

+ processing_fee 
    + {FE}_b + max_response_len * {FE}_r + 
    + (max_response_len - response_len) * ({CB}_r + {DC}_r + {ED}_r) 

= 

{CD}_b + {DE}_b + {EF}_b
    + {CB}_b + {DC}_b + {ED}_b 
    + request_len * ({CD}_r + {DE}_r + {EF}_r)
    + (max_response_len + max_failure_len) * ({CB}_r + {DC}_r + {ED}_r)
    + {FE}_b + max_response_len * {FE}_r
    + processing_fee
```

Note that this amount does not depend on `response_len`. Said differently, the
destination node is fully responsible for the costs incurred by sending a large
response message.

The total amount of credits paid by the source (B) for a message that was
failed to deliver (For example, reporting node is E):

```
{CD}_b + request_len * {CD}_r 
    + {CB}_b + failure_len * {CB}_r 

+ {DE}_b + request_len * {DE}_r 
    + {DC}_b + failure_len * {DC}_r 

+ {ED}_b + failure_len * {ED}_r 

= 

{CD}_b + {DE}_b 
    + {ED}_b + {DC}_b + {CB}_b
    + request_len * ({CD}_r + {DE}_r)
    + failure_len * ({CB}_r + {DC}_r + {ED}_r)
```

Note that this value is lower than `Total{BF}`.


## The case of too expensive error

TODO: Explain the case of possibly DoS when the price for sending an error
message is too large for a node. Explain how we mitigate this case by notifying
neighbors/friends directly of price changes.


## Funder over Networker pricing

Recall the formula Total{BF} in previous sections for sending a message from B
to F. This formula gives us higher level values for costs of sending a message
from the node B to the node F. 

For example, it is possible that the nodes B and F are friends. We can use the
formula for Total{BF} to calculate linear pricing for sending a message from B
to F. Because our pricing scheme is linear, adding the costs of sending a
message through neighbors amounts to linear pricing of sending messages between
friends.

To obtain the base value for sending a message from B
to F, we assign `request_len = 0` to Total{BF}, and add {BC}_b:

```
[BF]_b := {BC}_b 
        + {CD}_b + {DE}_b + {EF}_b
        + {CB}_b + {DC}_b + {ED}_b 
        + (max_response_len + max_failure_len) * ({CB}_r + {DC}_r + {ED}_r)
        + {FE}_b + max_response_len * {FE}_r
        + processing_fee
```

To obtain the multiplier value for sending a message from B to F, we derivate
Total{BF} by the variable request_len and add {BC}_r. We obtain:

```
[BF]_r := {BC}_r + {CD}_r + {DE}_r + {EF}_r
```

Why add {BC}_b and {BC}_r?  When the message originates from B, this is not
relevant, because there is no point in B paying B for the work done. However,
if the message does not originate from B, then B should get compensation for
his work in passing the message.

The values [BF]_b and [BF]_r will then be calculated by B, and advertised to an
Indexer and to the friend F (Through the friend token channel). Other nodes in
the friends graph will be able to use those values as payment proposals, in
order to send request messages.


