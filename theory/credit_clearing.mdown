# CSwitch motivation and general idea
04.12.2017

## Introduction

CSwitch is an international communication infrastructure. It allows nodes
to send data packets to each other. To allow fair usage of the networking
resources, CSwitch allows a means of transferring credit between its
nodes.

Differently from the current design of the Internet, sending data packets over
the CSwitch network costs some credit for the sender. This credit is split
between the mediators of the message, and the end receiver. 

The sender, by sending a message, makes other nodes in the network perform work
for him. The mediators need to pass the message, and the receiver of the
message has to open the message and confirm the message receipt.  The credit
paid by the sender of the message is a sort of compensation for all the nodes
involved.

In the CSwitch design, nodes that pass messages through them earn credit. This
could incentivize people that are located in key geographical locations to
build communication infrastructure. In the current Internet only priviledged
people are allowed to start a new ISP (Internet Service Provider). CSwitch
allows anyone to be part of the communication infrastructure and earn credit
for his contribution.

Another advantage is resiliency against DoS (Denial of Service) inside the
CSwitch infrastructure. On the Internet, if a computer receives many data
packets he could be overloaded and as a result, stop being able to provide
service.  On the CSwitch infrastructure, sending many messages to a remote node
costs credit. In addition, a node that is bombarded with many messages earns
credit. 

## Ability to send funds implies ability to send messages

Consider this abstract idea: The abilities to send funds between nodes is
related to the ability to send messages between nodes. 

In particular, if we have a network where sending funds between nodes could be
performed efficiently, it is possible to create a mechanism to send messages
efficiently between nodes. This could be done as follows:

To send a message bit from node `A` to node `B`, `A` could send to `B` 1 credit
to represent the bit `0`, and 2 credits to represent the bit `1`. This
mechanism should also allow `B` to send messages to `A`. If `A` and `B` send
about the same amount of bytes to each other, on average none of them should
ever run out of funds to be able to send communication.

This of course is a very abstract idea, but it shows that ability to send funds
implies ability to send messages. 


## Blockchain solutions for passing value are not efficient

The CSwitch infrastrucure allows every node to send a message to a remote node
for a small fee. One could suggest to use a blockchain system, like Bitcoin, to
manage the transfer of funds between nodes (Those funds are the payment for
sending messages).

Direct blockchain based payment for every message sending is very inefficient,
as a blockchain based transaction involves communication to the whole
participants of the network.

One could suggest instead that nodes remember the debt between them, and settle
the payment at a later time using a blockchain based transaction. In the next
sections we take this idea further, and remove the requirement for a blockchain
based transaction to settle the debt.


## Mutual credit clearing

Assume that two business owners, a milkman and a baker, live next to each
other. Also assume that they live in a world without money.

One way the milkman and the baker could exchange goods without the use of money
is using the method of barter. the milkman could ask the baker from some break,
in exchange for some milk.  However, what if at a specific time the milkman
wants to get some bread from the baker, but the baker doesn't need any milk
from the milkman? In this case, the method of barter will not allow to perform
a transaction. Barter only works if the two involved parties are interested in
the exchange in a specific point in time.

To solve the problem, the milkman and the baker could use **mutual credit
clearing**: If the milkman wants to get bread from the baker, but the baker
doesn't need any milk right now, the baker will give the milkman a loaf of
bread, and write down on a piece of paper that the milkman owes him some
credit. The milkman will also write a similar note for reference.

A few days later later, if the baker wants to get milk from the milkman, but
the milkman doesn't want any bread from the baker at that specific point of
time, the baker could use his credit at the milkman to get milk. After the
milkman gives the baker a bottle of milk, the debt of the milkman to the baker
is cleared.

This method allows the milkman and the baker to perform exchange of their
goods, even if they do not want to exchange them at exactly the same time. 

One assumption that mutual credit clearing makes is that the milkman and the
baker trust each other. Suppose that the milkman takes 5 loafs of bread from
the baker. The milkman and the baker both write a note that the milkman ows the
baker credit that equals 5 loafs of bread. What if the milkman is gone one day,
without ever repaying the debt to the baker? The baker is left with a note that
the milkman ows him credit, but this note can not be redeemed anywhere for
goods.

The baker, by allowing the milkman to have debt to him, trusts that the milkman
will stick around to be able to pay back the debt in the future, in some way.

Some measures to be taken when using mutual credit clearing:

- Mutual credit clearing should only be set up between people that trust each
    other. It is advantage if those people know each other from the real world,
    and they have met in person.

- The maximum debt possible in the mutual credit clearing between two sides
    should be limited to some maximum amount. For example: If the baker allows the milkman to owe
    him credit of value at most 3 loafs of bread, the baker will not be able to lose
    more than 3 loafs of bread if A can't repay the debt.


Given these assumptions, the state of mutual credit between two nodes A and B
consists of the following parameters:

- A allows B maximum debt of md{AB}
- B allows A maximum debt of md{BA}

md{BA} and md{AB} are not necessarily equal. Drawn on a one dimensional scale,
we get a picture as follows (from the point of view of A):

```
                     d{AB}
     [-----------|-----^-------]
  -md{BA}        0           md{AB}
```

In the picture, B owes A some amount of money. The `^` marks shows the current
credit relationship between A and B. The value d{AB} is the mutual credit state
between A and B. It denotes the purchasing power of A with respect to B. It is
always true that `-md{BA} <= d{AB} <= md{AB}`. Note the symmetric property:
`d{AB} = -d{BA}`.

From the point of view of B, the picture looks as follows:

```
            d{BA)
     [-------^-----|-----------]
  -md{AB}          0         md{BA}
```

In the CSwitch architecture, we call such a pair of identities A and B **friends**.
A pair of friends represents a trust relationship in the real world between two
people.

The economy of mutual credit clearing between two people is simple, and it
requires that each side generates goods that the other side wants. In the
example above, the milkman wants to get bread, and the baker wants to get milk.
This does not always happen in the real world. 

If, for example, the baker decided to stop drinking milk (Maybe he got
allergic?), the simple mutual credit clearing between the milkman and the baker
will not keep working. After a few loafs of bread that the milkman takes from
the baker for credit, the baker will not allow the milkman to take any more,
because the debt is too large.

This problem could be solved if the baker possibly wanted to buy service from
the carpenter, assuming that the carpenter buys milk from the milkman. This
will usually happen in an economy of multiple players.


## Chains of mutual credit clearing

To extend the idea of credit clearing to the economy of multiple players we use
chains of mutual credit clearing. In this setting, every person has a few other
people he trusts, and maintains mutual credit clearing with.

Assume that a person A wants to send funds to another person B. If A and B
are friends (They directly manage mutual credit clearing), the transaction is
simple: A will decrease d{AB} and B will increase d{BA}. 

If A and B are not friends, they need the help of a mediator, or a chain of
mediators, to perform the transaction. A and B will look for a chain of the
following form:

```
A -- M1 -- M2 -- M3 -- B
```

Where A, M1 are friends, M1, M2 are friends, M2, M3 are friends and M3, B are
friends. Of course, the length of the chain could be arbitrary.

To transfer funds from A to B, A will first transfer funds to M1, M1 and will
transfer the funds to M2, M2 will transfer the funds to M3 and M3 will transfer
the funds to B. Each mediator (M1, M2, M3) can take a little amount of funds
for himself during the transaction, in exchange for helping A and B perform the
transaction.

We assume that friendship between people in the real world should allow any two
strangers A,B to find a chain of friends that connects them, to allow transfer
of funds between A and B. If no such chain is found, transfer of funds will not
be possible.


## Buying communication for credit

We showed above how funds could be transferred between nodes that are not
friends (They do not have a direct mutual credit clearing setup). We could use
a similar idea for the transfer of communication between nodes.

Assume a network of nodes, where every node is directly connected to some other
predefined nodes. If A and B are two directly connected nodes, we say that A
and B are **neighbors**. 

Note that being neighbors is not the same as being friends. Being neighbors
means being adjacent in the network topology. It does not imply the trust
required for being friends. Hence the network of neighbors (Used for transfer
of communication) is independent of the network of friends (Used for the
transfer of funds).

If A wants to send a message to some remote node C, A first finds a path from A
to C that goes along neighbors. For example:

```
A -- N1 -- N2 -- C
```

In the picture, A and N1 are neighbors, N1 and N2 are neighbors and N2 and C
are neighbors. This means that there is a direct communication channel from A
to N1, from N1 to N2 and from N2 to C. We will pass the message from A to C
along this path of neighbors.

To send the message, A prepares a message together with payment to the
mediators N1, N2, and to the recipient C. The mediators will pass the message
and earn some amount of credit for their services.


How can A pay N1? A and N1 maintain mutual credit clearing with very small
maximum debt amounts. 

There is no real world relationship between A and N1, hence they can not trust
each other to repay large debts. However, A and B can set up mutual credit
clearing for very small amounts.

Generally this setup of small mutual credit clearing should be sustainable if A
and B send similar amounts of messages through each other. However, if for
example A sends many messages through B and reaches the maximum debt B allows,
A will send B funds using a chain of friends from A to B. 

The mutual credit between two neighbors represents communication purchasing
power. If A and B are neighbors, A will try to ensure that it is not too close to
the maximum debt possible to B, and B will try to ensure it is not too close to
the maximum debt possible to A.

If for example, A notices that it is getting close to the maximum debt possible
to B, it will send funds to B through a chain of friends. The funds should be
approximately enough to balance the mutual credit between the neighbors A
and B.

As a summary: large amounts of credit passes using chain of friends, and
neighbors maintain mutual credit for very small amounts, used mostly for the
purchase of communication ability.


## Backwards credit payment

In the previous sections we showed that transfer of funds between
two nodes could be accomplished by "pushing" credit along a chain of friends.
On the communication layer, we showed that communication between two nodes is
done by sending messages together with credit along a chain of neighbors.

To examine the security of this setup, we need to consider the incentives of
the nodes participating in the transaction. In this section we introduce a
method to perform a transaction in the communication layer, between neighbors.
The considerations for a transaction done in the funds layer (between friends)
should be similar.

Consider the following network formation of neighbors:

```
A -- B -- C -- D
```

A,B are neighbors, B,C are neighbors, C,D are neighbours. Suppose that A wants
to send a message to D. We described earlier the general idea for sending a
message from A to B together with payments to the mediators, but we didn't yet
gave the specifics of how to do this, to make this transaction somewhat atomic
and secure.

Consider first the following naive idea: A will calculate how much credit he
needs to give to each of the mediator, for example: 2 credits to B, 2 credits
to C and 2 credits to D. Next, A will send the message together with
payments of 6 to B, requesting to pass the message all the way to A.

B could keep 2 credits to himself, passing the message with 4 credits to C.
However, it is of greater benefit to B to keep the 6 credits to himself and
discard the message. 

We solve this problem using the idea of **backwards payment of credits**. This idea
is crucial to the operation of CSwitch.

When A sends a message to B, instead of sending the message together with
credit, it sends the message to B together with a promise for credit, in the
future, if the message is delivered. A promises to pay B 6 credits if he brings
back proof that the message was delivered to D. In addition, A freezes 6
credits in his mutual communication credit with B. Those 6 credits will not be
unfrozen until A gets a proof from B that the message was delivered, or that A gets
from B a message notifying that an error happened while processing the request.

Next, B passes the message to C, together with a promise to pay 4 credits if C
brings a proof that the message was delivered to D. Like A, B freezes 4 credits
in his mutual communication credit with C. C sends the message to D,
together with a promise to pay 2 credits if D signs the message and sends the
signature back to C.

    Question: Does this freezing allow DOS attacks ?

D receives the message, creates a signature of receipt, and sends it back to C.
C pays 2 credits to D. Next, C sends the signature back to B and receives 4
credits from B. B Finally B sends the signature back to A and receives 6
credits.

Eventually, A paid 6 credits, and B,C,D each earned two credits. In addition, A
knows that the message was received by D. 

We distinguish between two stages in this transaction: We call the forward
stage (Sending the message from A to D) the "request", and the backwards stage
(Sending the signature from D to A) the "response".

What happens if one of the mediators can not pass the message during the
request stage? For example, if C wants to pass the message to D, but the cable
between C and D suddenly disconnected? C will send back a message to B,
claiming that the message could not be delivered, together with C's signature.
B will pay C 1 credit.  B will then forward this error message to A. Seeing the
provided error message, A will pay B 2 credits. 

In the case of such error, every node in the path up to the problem location
will receive only half of the originally promised credit amount.

    Question: Is this half has a mathematical meaning ? If I understand correctly
    the rest of this document, it should be less than half (under some symmmetry
    assumptions) because reporting an error without actually sending the request
    is twice as cheap as actually sending the request and forwarding the response.

The example above does not take into account the length of the transferred
message. The longer the message, the more effort the mediators need to do to
pass the message, and the more they should be paid.

In CSwitch the typical payment for passing a message is `2 * len(message)`
credit. We multiply by `2` to allow for the case of failure, where only half of
the promised amount of credits will be paid.

    Question: Is a linear cost, `2 * len(message)`, has a mathematical reason ? Or
    the optimal function should be some monotonic function of the length ?

## Analyzing incentives in Backwards credit payment

We now analyze various cases of action during a backwards credit payment
transaction, to make sure that all the participants of the transaction are
properly incentivized to play by the rules.

Consider the following network formation between neighbors:

```
A -- B -- C -- D -- E
```

The following are some edge cases we manage to deal with:

(1) A sends a message to a nonexistent remote node T.

As a result, One of the nodes, for example D, will send back an error response
message, signed by D, back to C. The error response message will eventually
arrive A, and all the mediator nodes will be paid half of the promised credit
amount. This means that sending a message to a nonexistent remote node costs
money to A, and the mediator nodes are still compensated.


(2) B receives a request to forward a message to C, but he doesn't forward the
message to C.

This is not a reasonable for B, because B could potentially earn money
from this transaction.


(3) A and E cooperate. When E receives a request message, E doesn't return a
signed response message to D.

D will keep the transaction open, waiting for a response from E. This blocks
the channel between D and E. Next time, A will not be able to send a message to
A through D. The channel between D and E will be opened only when E sends back
a response message to D.

    Question: Is the channel between D and E completely blocked, or only a virtual
    channel that is dedicated for A ?

(4) B receives a response message from C but doesn't pay C.

An inconsistency will be created in the neighbor relationship between B and C,
and communication will not continue between them until this inconsistency is
solved manually.


(5) C receives a response message from D but does not pass it to B.

This means that C gives up on credit, passing the response message to B will
earn C credit. Therefore, C will prefer to pass the response message to B.


Analyzing the cases above does not mean that the backwards credit payment is
proved to be safe, but currently we do not know of any holes in its design.

    Question: If B and C cooperate, then B has the private keys of B, and therefore
    B can obtain extra credit from A by reporting an error. A sends a message to E
    through B, then B returns a signed error message (signed with the private key of
    C) to A. This way, B earns 2 credit for receiving a single message, processing
    it and sending a single message.

## Possible transaction delays

The methods we have described for transactions of messages neighbors, and
dually, for transactions of funds between friends, do not put any limit on the
amount of time it takes for a transaction to complete.

Consider the following example. In a neighbors graph of the following
formation:
```
A -- B -- C -- D
```

A wants to send a message to D. A request message is first created, and A sends
the request message to B, with a promise of paying 6 credits given a proof of
delivery to D. B then forwards the request message to C, with a promise of
paying 4 credits given proof of delivery to D. Suddenly C crashes due to a power outage. 

B could naively send back to A an error response message. A will pay B 1
credit, which is half of the promised credit for forwarding the message. 

However, if C did manage to receive the message from B just before it crashed,
when the power is restored C will wake up and forward the request message to
D, with promise of payment of 2 credits to D. D will receive the message, and
send back to C a signed response message. C then pays D 2 credits.

Next, C sends the signed response message to B, requiring B to pay C 4 credits.
B will have no choice but paying 4 credits to C, **leaving B at a loss of 3
credits.** Therefore, B is taking a risk by sending an error message back to A.

Instead, in the above described situation (C doesn't respond in a timely
manner), B will keep the request sent by A in memory, and wait indefinately for
a response message from C. If C ever wakes up and sends B the response, B will
pay C 4 credits.  Then B will send the response back to A and redeem his
promised 6 credits.


When used in the graph of neighbors, The method of indefinite waiting for
responses has the following main disadvantages:

- Long term Memory penalty. Nodes have to remember all the currently
    "open requests".

- Credit capacity penalty. The more open requests there are between two
    adjacent neighbors, the less free communication credit capacity they have
    between them. This is because any open request implies that some credit is
    frozen.


We may replace the indefinite waiting for a response message to some random and
very long time period, or possibly, keep all the open requests in long term
memory until no more space or communication capacity is available for open
requests. When new requests are opened, very old requests could be discarded.
Requests whose loss imposes lower credit risk could be discarded first.

## Fund transactions are not atomic

When transferring funds in the graph of friends, the method of indefinite
waiting for response messages imposes bigger risks (with respect to the graph
of neighbors). This is because transactions in the graph of friends could
involve large amounts of credit. 

Fund transactions are not fully atomic. Consider the following graph of
friends:

```
A -- B -- C -- D
```

Consider the following cases:

(1) A wants to send funds to D. A sends a request message to
B. B sends a request message to C. Suddenly C crashes. As in the previous
example (in the graph of neighbors) is not known to B if C has received the
message, therefore B will wait indefinately, until a response message is
received from C. 

Meanwhile, A doesn't know if the trasfer of funds to D has completed. If A has
sent a large amount of money to D, this could be a problem. A could try to open
a new request to send funds to D, but then it is possible that the two
transactions will succeed, and eventually A sent D twice as much credit.

(2) A wants to send funds to D. A sends a request message to B, B forwards the
request message to C, C forwards the request message to D. D then sends back a
signed response message to C. This implies that C paid D the promised amount of credit.
C then suddenly crashes.

From D's point of view, the funds from A were received. A doesn't know if the
funds transfer transaction was completed.

As a summary:

- If A knows that the funds transfer was completed, then D has already received the funds. 
- It is possible that D received the funds, but A doesn't know about this yet.


A possible solution to the lack of atomicity of funds transfer would be to
split large payments into smaller chunks. For example, if A wants to send D
1000 credits, A could send D 50 credits at a time. Most of the fund transfers
should complete successfuly. If a transaction of 50 credits is somehow delayed,
A could attempt to send another 50 credits to D. At some point enough credits
have arrived to D.

After some period of time D might discover that it has received more
credits than necessary from A, for example, 1050 credits instead of 1000.


## The idea of time limiting requests (Abandoned)

In the past we considered the idea of adding a time limit for a request (In the
layer of communication or funds transfer), but we abandoned it due to problems
of inconsistencies that could arise in the mutual credit management (between
neighbors or friends).

We show an example of implementing the time limit feature for a request.
Consider the following graph of friends:

```
A -- B -- C -- D
```

A wants to transfer funds to D with a time limit for the request.
A is willing to wait at most 6 seconds before the request is fulfilled.  A
sends B a request message that contains:

- A promise for 6 credits upon presenting a signed response message from D.
- Time remaining fulfill the request: 6 seconds.

B sends C a request message that contains:

- A promise for 4 credits upon presenting a signed response message from D.
- Time remaining to fulfill the request: 4 seconds.

C sends D a request message that contains:

- A promise for 2 credits upon presenting a signed response message.
- Time remaining to fulfill the request: 2 seconds.

D then sends a signed response message back to C. If the signed response
message was sent on time (Before 2 seconds passed), C will accept the message
and pay D 2 credits. C then sends back the signed response message to B. If
sent on time, B will accept the message and pay C 4 credits. Finally B sends
back the signed response message to A. If the response message arrived on time,
A will pay B the promised 6 credits.


The idea time limiting requests was abandoned because of the way it performs
when network failures happen. Consider the previous example of A attempting to
send funds to D, when A is willing to wait at most 6 seconds.

Assume that A sends a request message to B, B sends a request message to C, C
sends a request message to D. Next, D sends C a signed response message. C pays
D the promised 2 credits, and then C attempts to send back to B the signed
response message, but suddenly the connection between B and C is disturbed.

```
A -- B -X- C -- D
```

If the connection is disturbed for a few seconds, B will send back to A an
error message indicating that the request could not be fulfilled. B will be
paid 1 credit by A.

C is at a loss of 2 credits. C thinks that he managed to send the signed
response message to B on time. However, B has never received the signed
response message. D has received the funds, but A is not sure that the
transaction is completed.

There is conflict in the mutual credit state between B and C. C thinks that B
should pay him 4 credits, while B thinks that C didn't send the signed response
message on time.

Those kind of conflicts are difficult to solve, because it is not known who is
at blame in this situation. It is possible that the communication between B and
C was disturbed due to some problem that is outside of the control of both B
and C.

Because of the possibility of conflicts that can not be resolved easily, **we
decided to abandon the idea of time limiting requests.**

