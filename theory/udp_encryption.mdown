# UDP style Encryption
25.01.2018


## Introduction

Many encryption schemes rely on an underlying communication layer that
guarantees the order of sent messages. This underlying communication layer is
usually TCP. Examples for such encryption schemes are SSH and TLS. Such
encryption schemes fail to work over a communication layer that does not
guarantee ordered arrival of messages.

Consider SSH for example: In order to avoid replay attacks, SSH uses an
incrementing counter for each side of the communication. Every messages
contains an internal counter that increments for every message. The receiving
side always checks the internal counter of incoming messages. If the counter
value does not match the expected value, the message is discarded.

Consider a UDP like communication layer between two parties A and B, where there
is no guarantee for ordered arrival of messages: Messages may be dropped or
arrive out of order. We want to set up an encrypted channel over such a
communication layer.

In this case we can not use the countermeasure used by SSH to defend against
replay attacks. We can not use an incrementing counter because we can not be
sure that messages arrive at the remote party at the same order they were sent.

This document presents a design for an anti-replay mechanism to be used when
encrypting UDP style communication layers. The design is due to Zur, and thus
called Zur's sliding window.


## Problem setup

Consider two parties A and B sending datagrams over a nonreliable UDP style
communication layer. A and B both have public keys, each party knows the public
key of the other party. 

An attacker E can see all the communication on the wire between A and B, and
can send messages on the wire. E also knows the public keys of A and B.

```
A -----+------- B
       |
       |
       |
       E 
```

Assume that A and B somehow negotiated a symmetric key for symmetric encryption
that allows authentication (If A encrypts a message, B can know for sure that
the encrypted message was created by A).

If A naively sends encrypted datagrams to B, E will be able to resend those
datagrams to B, making B think that A have sent those messages again. We call
this attack **replay attack**. 

Why is this a security problem? Consider this example: A sends a message to
open a gate, a person then enters a building, and finally A sends a message to
close the gate. If E could replay the "open gate" message, E could enter the
building. 

A and B need to find a way to send encrypted messages so that E will not be
able to replay those messages.


## Connection setup

We consider two sides: client (A) and server (B). The client is the side that
has the ability to initiate a connection.  In the case of IP networks, for
example, the client knows the IP address of the server, but the server does not
necessarily know the IP address of the client. 

In other cases it is possible that both sides can play the role of the client
(If for example both sides have static known addresses).


Setting up an encrypted connection is done through a 5-way handshake, as
follows:

```
1. A -> B: RequestNonce         (randNonce1)
2. B -> A: ResponseNonce        (randNonce1, randNonceB, responseNonceB, Signature(B))

3. A -> B: ExchangeActive       (randNonceB, randNonceA, publicKeyA, publicKeyB, dhPublicKeyA, keySaltA, Signature(A))
4. B -> A: ExchangePassive      (hashPrev, dhPublicKeyB, keySaltB, Signature(B))
5. A -> B: ChannelReady         (hashPrev, Signature(A))
```

Where:

- hashPrev is sha512/256 over the previous message [32 bytes]. This makes sure
    that the messages are ordered correctly.
- signature(X) [64 bytes] means a signature over "{MessageName}" and all the
    previous fields in the message by party X.
- publicKeyX and dhPublicKeyX are of size [32 bytes].
- keySalt is of size [32 bytes].

A considers the connection to be up once message ChannelReady is sent. B
considers the connection to be up once message ChannelReady is received.

In ResponseNonce, randNonceB is taken from a constant size nonces list kept at B.
randNonceB is the newest nonce on this list. Every period of time, B generates
a new random Nonce and adds it into the nonces list, removing the oldest nonce
from the list.

Whenever B receives an ExchangeActive message, it makes sure that randNonceB is
found somewhere inside the constant size nonces list.

Using a constant size nonces list, B can respond to message RequestNonce with
ResponseNonce without having to keep any state for that request, hence
protecting B from DoS.


After the connection was set up, each party has two ends of channels, one
sending end and one receving end. The channel from A to B is called
`channelAId := sha512/256("Init" || dhPublicKeyA || dhPublicKeyB || randNonceA || randNonceB)[:16]`. 
The Channel from B to A is called:
`channelBId := sha512/256("Accp" || dhPublicKeyB || dhPublicKeyA || randNonceB || randNonceA)[:16]`.

Note: channelXId is of size [16 bytes].

Both parties A and B create two symmetric keys for sending and receiving
messages (keySaltA is used for sending messages from A to B, keySaltB is used
for sending messages from B to A). We denote the symmetric keys by
symmetricKeyAB (Sending from A to B) and symmetricKeyBA (Sending from B to A).

Pay special attention to the distinction between the concept of a connection
setup and a channel. A connection setup between A and B creates two new
distinct channels: A channel for sending messages from A to B, and a channel
for sending messages from B to A. Each channel makes use of a different
symmetric encryption key.

TODO: Dealing with message drops during connection setup? How to maintain state
for connection setup?


## Ideas behind connection setup

The first stage, RequestNonce and ResponseNonce, serve as some kind of a
timestamp requested by A. In some sense, A requests the current time at B's
location. This current time is represented by a random nonce from the top of
the constant size nonces list B maintains.

When A sends an ExchangeActive message containing randNonceB, B can be sure
that this message was created recently by B, and was not replayed.

B does not need to allocate new memory to serve a RequestNonce message, which
protects B from DoS. Only public keys that are "friends" of B can cause him to
allocate new memory.

We do not use a real timestamp because it will require having synchronized clocks
between nodes, which is very difficult to acheive on a decentralized setting.

In the next 3 messages: ExchangeActive, ExchangePassive and ChannelReady there
is a hashPrev field. This field is the result of a hash function applied over
the previous messages. This field makes sure that a message can be sent only
after the previous message was received (Or else, the hash can not be
calculated).

When B sends the ExchangePassive message, B already has all the information
required to send and receive messages, however, A still does not have B's
dhPublicKeyB, and therefore does not yet have the symmetric keys used for
communication. If B sends an encrypted message to A at this point, it is
possible that this message will arrive before the ExchangePassive message
(Messages may arrive out of order), and therefore it will be dropped by A.

The solution to this problem is the extra ChannelReady message, sent from A to
B. This message indicates to B that A has already obtained all the symmetric
keys required for decryption of messages. At this point B can send an encrypted
message to A, and know for sure that A will be able to decrypt it (If no other
failure occured).

Note that every message that contains a signature also contains an extra nonce
value added by the sender (Which is also the signer). This is used to make sure
the remote side does not trick the sender into signing specially crafted data.


## Channel receiving ends Carousel

Each party X maintains a maximum of 3 receiving ends of channels from a given
remote party Y. This is called the channels carousel mechanism. Whenever a new
receiving end is created from Y (For example, if X or Y initiated a new
connection using the four-way handshake), X will erase the oldest receiving
channel it has from Y, and replace it with the new receiving end.

The channels carousel ensures that if there are still some messages from Y sent
through an old channel, floating in the network, when those messages arrive to
X, X will be able to receive them. If X maintained only one receiving end of a
channel from Y to X, those messages would have been lost.

Why does the channel carousel have 3 receiving ends of channels and not just 2?
It is possible that both parties X and Y attempt to setup a connection at the
same time. In this case two new receiving ends of channels will be created for
each party. If the capacity of the channel carousel was only 2, the
simultaneous setup of two connections would have erased all of the old
receiving ends, and messages that were previously sent might be lost.

Note that while maximum of 3 receiving ends of channels are maintained against
every remote party, only one sending end of a channel is required against every
remote party.

We still haven't explained what a channel end (receiving end or sending end)
contains, and how we plan to avoid replay attacks using our mechanism. This is
explained in the next sections.


## Memory representation for channel ends

Upon connection setup, every party sets up the following state in memory for
the sending end of a channel:

**SendingEndState**

- channelId         [16 bytes]
- sendCounter       [12 bytes]
- symmetricKey      [32 bytes]

The initial value of sendCounter is 1. (Because the recvCounter starts from 0,
and sendCounter > recvCounter)

To send a message M to through a channel to the remote party, the party will
send:

```
Enc{
    Key=symmetricKey, 
    Nonce=sendCounter, 
    AdditionalAuthenticated=channelId
}(M) 
```

to the remote party. The sendCounter is then incremented by 1.

The following state is kept in memory for the receiving end of a channel:

**ReceivingEndState<K>**

- channelId         [16 bytes]
- recvCounter       [12 bytes]
- zurWindowBitmask  [K bytes/8*K bits]
- symmetricKey      [32 bytes]

The initial value for recvCounter is 0.

recvCounter together with zurWindowBitmask allow to represent the set of counters
that will be accepted for an incoming message: 
```
(counter > recvCounter) 
or
(
    (recvCounter - 8*K <= counter < recvCounter) 
    and 
    (zurWindowBitmask[recvCounter - counter - 1] = 0)
)
```

Note: We consider the lsb of the zurWindowBitmask to be bit number 0.

This zur window bitmask construction allows more freedom for messages to arrive
out of order or not arrive at all. K is some parameter that we need to choose.
A reasonable value for K is 32 bytes = 256 bits. The bigger the value of K,
the more flexibility we allow for messages to be delayed or be dropped, for the
cost of using more memory for one channel receiving end.


Upon the receipt of an encrypted message, the receiving party does the
following:

1. Read the additional authenticated data to obtain the channelId.
2. Attempt to decrypt the encrypted message using the appropriate symmetricKey. 
    If the decryption fails, discard the message.
3. Check the nonce:
    a. If nonce is bigger than recvCounter:
        - Update currentCounter = nonce.
        - Shift zurWindowBitmask nonce - recvCounter bits to the left (Inserting the bit `1` from the
            right on the first bit shift).
    b.  If nonce is in `[recvCounter - K*8, recvCounter)` and
        the corresponding zurWindowBitmask bit is 0:
        - Set `zurWindowBitmask[recvCounter - counter - 1] = 1`
    c.  Else: Discard the message.


## Connection teardown

Consider two parties A and B with a channel ChannelAB from A to B. A uses the channel to
send encrypted messages to B. If the machine that runs B shuts down or
malfunctions, it is possible that B will lose his state for the receiving end
of the channel ChannelAB. 

A might keep sending encrypted messages to B on the ChannelAB channel, but B
will not be able to read those messages because B does not have the symmetric
key required to decrypt the messages, and B does not have a recvCounter in
place to make sure the messages are not being replayed.

In this case B will indicate to A that he has no information about the channel
ChannelAB using an UnknownChannel message:

**UnknownChannel**

- channelId                                                 [16 bytes]
- randNonce                                                 [16 bytes]
- Signature("UnknownChannel" || channelId || randNonce)     [64 bytes]

B will send a new UnknownChannel message to A every time A attempts to send an
encrypted message to the channel ChannelAB.

Upon the receipt of this message, the party A will remove its sending end of
the ChannelAB channel. If A has the ability to initiate a connection, it might
attempt to setup a new connection with B.

Note that UnknownChannel can not be replayed, because it can only be sent once
per channel. Once it is sent, the channel will never be used again.


