# The design of the AppManager component
17.07.2018

## Intro

The AppManager component is the communication interface between CSwitch and the
user's applications. Most users will not interface with the AppManager
directly. They will instead use an application that wraps CSwitch
functionality.


```

   +----[CSwitch]----+
   |                 |      +--------------+
   |     Networker --+------|              |========== IndexerClient
   |                 |      |  AppManager  |
   |     Funder -----+------|              |---------\
   |                 |      +--------------+         +---- App
   |      ...        |                               +---- App
   +-----------------+                               +---- App

```

User's applications are native programs running on the user's machine (Or
possibly outside of it, communicating securely with the AppManager). They
could be implemented by anyone, in any language. The communication between
user's apps and the AppManager is done over secure TCP connection.

AppManager exposes low level API for the main CSwitch abilities:
Sending and receiving messages and funds and the management of trust for
neighbors and friends. 

The AppManager is also the connection point between CSwitch and an
IndexerClient. IndexerClient is a "special" app that provides CSwitch with
routes between neighbors and friends. An operational IndexerClient is crucial
for the operation of the CSwitch engine.

We say that IndexerClient is a "special" app because it has a different
interface to AppManager than the rest of the apps have. IndexerClient is the
only app that has the ability to receive requests (for routes) from the CSwitch
engine.

Examples for possible apps to be connected to AppManager:

- A driver that provides the user with an IPv6 interface (Like done on [CJDNS](https://github.com/cjdelisle/cjdns)).
- A graphical web interface for managing trust between neighbors and friends.
- An app for automatic payment.


## Configuration

On startup, the AppManager should load a configuration file. The configuration
file should contain: 

- IndexerClient configuration:
    - The public key of IndexerClient app.

- Apps configuration:
    - port number (u32). 
    - App name (TODO: What if there are multiple instances of the same application?)
    - App public key
    - App permissions


The port number allow AppManager to forward messages to applications. Remote
nodes can choose a port to decide to send a message to a remote application.
Therefore no two applications can have thee same port.

Possible permissions (From lower to higher):
(TODO: Review the model of permissions. Is this the wanted level of
granularity?)

- VIEW
    - View changes to the state of CSwitch.

- COMMUNICATION
    - View changes to the state of CSwitch.
    - Allows to send and receive communication.

- COMMUNICATION_AND_FUNDS
    - View changes to the state of CSwitch.
    - Allows to send and receive communication.
    - Allows to send funds.

- ALL
    - View changes to the state of CSwitch.
    - Allows to send and receive communication.
    - Allows to send funds.
    - Allows to manage neighbors and friends.

The configuration should be some textual format, possibly [TOML](https://github.com/toml-lang/toml).

Other information (Like neighbors list, friends list and their state) will be
obtained as messages from the Networker and Funder.


## Security

The AppManager is the gatekeeper to the CSwitch engine. CSwitch serves as a
user's wallet, and therefore it must be secured. Restricting access to CSwitch
through the AppManager component is done using the following mechanisms:

- Application public keys whitelist
- Application permissions

(NOTE: At the initial implementation permissions are not required. We can add
this feature in the future.)


## Secure communication

The communication between AppManager and an app begins as follows:

(0) Application opens a TCP connection to AppManager.

(1) Application -> AppManager:

[AppRandNonce]
- appRandNonce
- appPublicKey

(if appPublicKey is not on the AppManager's whitelist, he will close the
connection).

(2) AppManager -> Application:

[AppManagerRandNonce]
- appManagerRandNonce
- appManagerPublicKey

(if appManagerPublicKey is not as expected for the app, the app will close the
connection).

(3) Application -> AppManager:

[AppDh]
- appDhPublicKey
- appManagerRandNonce
- appKeySalt
- signature{appPublicKey}(previous fields)

(if the signature is invalid, the connection will be closed).

(4) AppManager -> Application:

[AppManagerDh]
- appManagerDhPublicKey
- appManagerRandNonce
- appManagerKeySalt
- signature{appManagerPublicKey}(previous fields)

(if the signature is invalid, the connection will be closed).


TODO: Handle possible man in the middle attack with curve25519 (Weak points in
the group).

After the exchange, both the Application and the AppManager combine the dh keys
into one shared secret. This shared secret is then expanded into two symmetric
keys for communication, a key for each direction. (A key for AppManager -> App,
and another key for App -> AppManager). 

The derivation of two symmetric keys is done using the
[hkdf](https://en.wikipedia.org/wiki/HKDF) algorithm. See the function
`derive_symmetric_key()` at `src/ccrypto/dh.rs` for more details.

Symmetric encryption will be done using ChaCha20 with Poly1305 for
authentication. Nonces will be generated randomly. See for example
Encryptor::encrypt() method at `src/crypto/sym_encrypt.rs` for more details.


## Interface with IndexerClient

(Will be serialized using capnp, See app_manager.capnp for more details)

```
RequestPath                   IndexerClient -> AppManager
ResponsePath                  AppManager -> IndexerClient
ClosePath                     IndexerClient -> AppManager
RequestSendMessage            IndexerClient -> AppManager
ResponseSendMessage           AppManager -> IndexerClient
MessageReceived               IndexerClient -> AppManager
RespondIncomingMessage        AppManager -> IndexerClient

RequestNeighborsRoute         AppManager -> IndexerClient
ResponseNeighborsRoute        IndexerClient -> AppManager

RequestFriendsRoute           AppManager -> IndexerClient
ResponseFriendsRoute          IndexerClient -> AppManager
```

AppManager allows IndexerClient to send and receive messages. This is done by
forwarding those messages to/from the Networker. Examples:

```
           RequestSendMessage             RequestSendMessage
Networker     <----------     AppManager   <--------------   IndexerClient



           ResponseSendMessage            ResponseSendMessage 
Networker     ---------->     AppManager   -------------->   IndexerClient
```

AppManager also forwards requests for routes of both the Networker and the
Funder to IndexerClient. Example:

```
           RequestFriendsRoute            RequestFriendsRoute
Networker     ---------->     AppManager   -------------->   IndexerClient
```

Note that the above is not a mistake. Networker is the one that should be
asking for friends routes, and Funder is the one that should be asking for
neighbors routes.


## Interface with an Application

(Will be serialized using capnp, See app_manager.capnp for more details)

Messages:

```
RequestPath                   Application -> AppManager
ResponsePath                  AppManager -> Application
ClosePath                     Application -> AppManager
RequestSendMessage            Application -> AppManager
ResponseSendMessage           AppManager -> Application
MessageReceived               AppManager -> Application
RespondIncomingMessage        Application -> AppManager
```

Funds transfer:

```
RequestSendFunds              Application -> AppManager
ResponseSendFunds             AppManager -> Application
ReceiptAck                    Application -> AppManager
```


Neighbor management:

```
OpenNeighbor                  Application -> AppManager
CloseNeighbor                 Application -> AppManager
AddNeighbor                   Application -> AppManager
RemoveNeighbor                Application -> AppManager
EnableNeighbor                Application -> AppManager
DisableNeighbor               Application -> AppManager

SetNeighborRemoteMaxDebt      Application -> AppManager
SetNeighborMaxTokenChannels   Application -> AppManager

ResetNeighborChannel          Application -> AppManager
```


Friend management:

```
OpenFriend                    Application -> AppManager
CloseFriend                   Application -> AppManager
AddFriend                     Application -> AppManager
RemoveFriend                  Application -> AppManager
EnableFriend                  Application -> AppManager
DisableFriend                 Application -> AppManager

SetFriendRemoteMaxDebt        Application -> AppManager

ResetFriendChannel            Application -> AppManager
```

Updates:

```
StateUpdate                   AppManager -> Application
```


Routes:

```
RequestNeighborsRoute         Application -> AppManager
ResponseNeighborsRoute        AppManager -> Application
RequestFriendsRoute           Application -> AppManager
ResponseFriendsRoute          AppManager -> Application
```


Messages related to communication messages are forwarded from the Applicaction
to the Networker, and the other way around.
Messages related to Funds transfer are forwarded from the Application to the
Funder, and the other way around.

A ResponseSendFunds message sent from AppManager to the Application should be
kept at the AppManager until a valid receiptAck message is received. 
If a receiptAck have not yet been received, and the Application restarted
(Communication was lost, and then regained), the AppManager should retransmit
the ResponseSendFunds message to the Application.

This is important because ResponseSendFunds contains a receipt for the
payment. If an Application performed a payment and suddenly crashed before
obtaining the receipt, credits could be lost. Using the receiptAck mechanism we
avoid this possibility. Also note that the Funder will also keep the 
ResponseSendFunds message sent to AppManager until a ReceiptAck message is
received from AppManager. The Funder keeps this information inside a persistent
database.

Illustration:


```
    <--[RequestSendFunds]--           <--[RequestSendFunds]--
Funder                     AppManager                    Application


    --[ResponseSendFunds]-->          --[ResponseSendFunds]-->
Funder                     AppManager                    Application


        <--[ReceiptAck]--               <--[ReceiptAck]--
Funder                     AppManager                    Application

```

On the last step in the illustration, AppManager first receives ReceiptAck,
checks that it is valid, and only then removes the record of the corresponding
ResponseSendFunds message. Funder does the same.

Note that AppManager does not keep any persistent data.


Neighbor management messages are forwarded from the Application to the
Networker. Friends management messages are forwarded from the Application to
the Funder.

NetworkerStateUpdate and FriendsStateUpdate are of special importance.
Whenever a significant change happens for the state of the Networker, the
Networker sends a NetworkerStateUpdate message to AppManager. The same is true
for the Funder.

AppManager should maintain the current state of the Networker and the Funder.
Whenever a new Application connects, AppManager will send it the full state of
the Networker and the Funder using NetworkerStateUpdate and FunderStateUpdate
messages.

In addition, whenever a new {Networker, Funder}StateUpdate messages is
received by the AppManager, the AppManager will forward this message to all
active Applications. This should allow all the Applications to stay up to date
with the current state of the Networker and the Funder.



## Interface with Networker

```
RequestPath                   AppManager -> Networker
ResponsePath                  Networker -> AppManager
RequestSendMessage            AppManager -> Networker
ResponseSendMessage           Networker -> AppManager
MessageReceived               Networker -> AppManager
RespondIncomingMessage        AppManager -> Networker

OpenNeighbor                  AppManager -> Networker
CloseNeighbor                 AppManager -> Networker

RequestFriendsRoute           Networker -> AppManager
ResponseFriendsRoute          AppManager -> Networker

SetNeighborRemoteMaxDebt      AppManager -> Networker
SetNeighborMaxTokenChannels   AppManager -> Networker

OpenNeighbor                  AppManager -> Networker
CloseNeighbor                 AppManager -> Networker
AddNeighbor                   AppManager -> Networker
RemoveNeighbor                AppManager -> Networker
EnableNeighbor                AppManager -> Networker
DisableNeighbor               AppManager -> Networker

NeighborStateUpdate           Networker -> AppManager
ResetNeighborChannel          AppManager -> Networker
```


## Interface with Funder

```
RequestSendFunds              AppManager -> Funder
ResponseSendFunds             Funder -> Application
ReceiptAck                    AppManager -> Funder

RequestNeighborsRoute         Funder -> AppManager
ResponseNeighborsRoute        AppManager -> Funder

OpenFriend                    AppManager -> Funder
CloseFriend                   AppManager -> Funder
AddFriend                     AppManager -> Funder
RemoveFriend                  AppManager -> Funder
EnableFriend                  AppManager -> Funder
DisableFriend                 AppManager -> Funder

SetFriendRemoteMaxDebt        AppManager -> Funder

ResetFriendChannel            AppManager -> Funder
FriendStateUpdate             Funder -> AppManager
```

## Example for using AppManager

We will describe here the way an example Application can use the services of
the AppManager. Generally, this is how an Application communicates with
CSwitch.

Consider an instant messaging application called **MyIm** with the ability to send
messages and funds between users. The application allows users to maintain a
contact list, and send messages or funds to users in their contact list. The
application shows a web interface, listening for example on
`https://localhost/`.

The first step is for the user to create a key pair for the Application: A
public key and a private key. The private key is kept with the application, and
the public key will be added to the configuration file of CSwitch. In addition,
the application will be given CSwitch's AppManager's public key.


```
          +------------------+            +------------------+       +------------+
          |    AppManager    |            |       MyIm       |       |            |    
  mpsc    |                  |    TCP     |                  | HTTPS |  Browser   |    
<---------|                  |<---------->|                  |<----->|            |    
          |                  |            |                  |       |            |    
          |                  |            |                  |       |            |
          +------------------+            +------------------+       +------------+

     - AppManager private key              - App private key
     - Application                         - AppManager public key
        - port number: 99
        - App name: "MyIm"
        - Application public key
        - Permissions: COMMUNICATION_AND_FUNDS
```

Assume for example that it is well known MyIm works on port 99 on the CSwitch
network, so the user configures his MyIm application to take port 99. From now
on any message delivered to the AppManager to port 99 will be directed to the
MyIm application. 

The MyIm application is given the permission set of COMMUNICATION_AND_FUNDS.
This will allow MyIm to send and receive messages, and also to send funds to
remote nodes. However, MyIm will not be able to change the configured set of
neighbors or friends.

Next, consider that the user wants to send a message to a remote user. The
remote user's address in the CSwitch network is a public key. MyIm will take
the following steps in order to send a message:

- Send a `RequestNeighborsRoute` to AppManager.
- Wait until a `ResponseNeighborRoute` message is received from AppManager with
    a neighbors route to the remote node. If no neighbors route is found, it
    will not be possible to send a message to the remote node.

- Open an encrypted path to the remote node, by sending the `RequestPath`
    message to AppManager with the obtained neighbors route, and an amount of
    credits we are willing to pay for opening this path.

- Wait for a receipt of `ResponsePath` from AppManager. 
    - If the received message indicates failure due to a too low proposal, we
        might give up on trying to open a path. 
    - If the received message indicated a route failure, go back to obtain a new route. 
    - If the received message indicates success, keep the obtained pathId.

- Generate a random messageId, and send a `RequestSendMessage` to AppManager
    with the given pathId, messageId and a message. Keep the messageId for
    later reference.

- If a `ResponseSendMessage` is received with the kept messageId, we can obtain
    information about the receipt status of the sent message: Success or
    failure. Failure indicates that the path is closed, and a new one needs to
    be created.



To send `1000` credits to a remote user, MyIm will do the following:

- Send a message to the remote user, requesting an invoiceId.

- Send a `RequestFriendsRoute` to AppManager.

- Wait for a `ResponseFriendsRoute`. 
    - Review the obtained routes, and check their capacity. 
    - If no route has enough capacity to send `1000` credits, abort.

- Create a `RequestSendFunds` message with the obtained invoiceId.
    - Generate a random `paymentId`. 
    - Create a `RequestSendFunds` message with this paymentId and the route previously obtained.
    - Save `RequestSendFunds` message to a persistent location, so that it will not
        be lost in case of a crash or a power failure.

- Send `RequestSendFunds` to AppManager.

- Wait for a receipt of `ResponseSendFunds`. 
    - On failure, abort.
    - On success: Obtain a receipt and keep it at a persistent location.

- Send a `ReceiptAck` back to AppManager, indicating that the receipt was
    received successfuly, and AppManager (And the Funder) may forget about the payment.

- Send a message containing the `receipt` to the remote user, completing the
    payment. (The receipt contains the original invoiceId, signed by the remote
    users's Funder).



## State saved in AppManager

AppManager saves it's full state in memory. In case of a crash, this state is lost. This is
not a problem, as persistent state is saved in the Networker and Funder.

AppManager maintains state for each Application. It saves the ids of opened messages
requests: RequestPath, RequestSendMessage, RequestSendFunds,
RequestNeighborsRoute, RequestFriendsRoute. This allows AppManager to send the
response to the correct Application when it arrives.

Besides this state, AppManager does not need to save anything. The Networker
and Funder have mechanisms in place for persisting important information, and
for making sure no duplicate requests are issued.

When an Application disconnects, AppManager removes all the state for this
Application from memory.

## Randomly generated outgoing unique ids

In order for an Application to be able to send multiple requests to AppManager
(Without having to wait for a reply), we are attaching a randomly generated unique
id to sent requests. The corresponding response will include the same unique
id, allowing the Application to match the response to the original request.

The following are the request messages that require the Application to generate
a random unique id:

- RequestPath
- RequestSendMessage
- RequestSendFunds
- RequestNeighborsRoute
- RequestFriendsRoute

The unique id is of size 128 bits, therefore it is highly unlikely to have a
collision.

A special care should be taken with the unique ids inside RequestSendMessage
and RequestSendFunds. The unique id in those messages is passed to Networker or
Funder (correspondingly), and eventually sent over the wire, unencrypted, as part of the
CSwitch protocol. 

AppManager should pass to the Networker and Funder exactly the same unique id
it have received from the Application when dealing with RequestSendMessage and
RequestSendFunds. This is crucial, as the Networker and Funder have mechanisms
for avoiding duplicate requests. 

Example:

An Application wants to send funds. It does the following steps:
- Randomly generate a unique id. Store the unique id in a persistent memory.
- Create a RequestSendFunds message with the generated unique id.
- Send RequestSendFunds message to AppManager.

AppManager should then forward the request to the Funder, which should pass the
message on, eventually completing the payment and returning a receipt.

Consider the case that right after the Application have sent RequestSendFunds
to AppManager, it crashed, and then restarted.
The Application has the randmoly generated unique id in persistent memory, but
it does not know for sure if it was sent succesfuly or not (Maybe Funder
crashed too?)

Therefore the Application will use the same unique id, generate a new
RequestSendFunds message and send it to AppManager.
AppManager will forward the message to Funder. Funder will look at the
unique requestId, and according to this unique id it will know if the message
was already sent. There are a few possible options:

- The message was never sent. In this case Funder will start the payment
    process.
- The message was sent, but a response was not yet received. In this case the
    Funder will do nothing.
- The message was sent, and a response was received (But not yet acked by the
    Application). In this case the Funder will send the response to the
    Application.


Note that if the AppManager did not use exactly the same randomly generated
unique id that was used by the Application, the Funder would not have been able
to know that this is the same payment, and he could transmit the same payment
twice!


## Incoming unique ids

AppManager may receive a MessageReceived message from the Networker.
MessageReceived does not contain a requestId. Therefore AppManager will
randomly generate a messageId for this message, and then forward it to the
Application.

When ready, the Application will create a RespondIncomingMessage with the same
messageId and send it back to the AppManager. The AppManager will forward the
RespondIncomingMessage to the Networker.

Note that here we do not use the underlying requestId (It is not even exposed
in MessageReceived). We let AppManager randomly generate a messageId instead.
This is because the underlying requestId is generated by a remote node, and
could be crafted maliciously so that there are a few equal requestIds.


## Sending messages

Two CSwitch nodes are called neighbors if there is a logical communication line
configured between them. A logical communication line could mean many things.
It could be UDP communication over the Internet, but also could be
communication over an ad-hoc cable connected between two computers, or even
communication over radio. It is also required that the two CSwitch nodes have
configured each other as neighbors. This is done using the `AddNeighbor` API.

Messages in the CSwitch network can only be sent through neighbors. This means
that if a node A wants to send node B a message, node A must first find a route
of adjacent neighbors from A to B. This is done by the `RequestNeighborsRoute`
API, and waiting for an answer.  It is possible that there is no available
neighbors route between A and B. In that case, it will not be possible to send
a message from A to B.

Given a route, it is already possible to send unencrypted messages between A
and B (This is done by the Messenger module, inside the Networker), but the
AppManager does not expose this ability, becuase the messages are not
encrypted.

Therefore, it is first required to open a secure path between A and B. This is
done using the `RequestPath` API. A secure path is created by performing Diffie
Hellman between A and B. The result of a `RequestPath` message is
`ResponsePath`, which contains a pathId, a unique identifier representing a
secure path from A to B, using a specific route. Finally A can send messages to
B using the `RequestSendMessage`, providing the obtained pathId.

The node A might want to use more than one route from A to B to send messages,
for efficiency or for higher reliability. In that case A can request more
routes using the `RequestNeighborsRoute` API, and open another secure route for
this path using `RequestPath`. Internally, the Networker will not perform
another Diffie-Hellman for the next RequestPath. It will only create a new
pathId and return it to AppManager, which in turn returns it to the
Application. The Application will then have a few pathIds to choose from, each
one will send a message along a different route, but encrypted with the same
symmetric keys.

It is possible to close a path if it is not required anymore. This is done
using the `ClosePath` API.

Messages sent over a path may arrive out of order at the remote side (like
UDP). 

Messages sent over a path are always acknowledged: If an application sends a
message using RequestSendMessage, it should eventually get a
ResponseSendMessage with the same requestId.  The exception to this rule is
that if an Application crashes, it will not receive an acknowledgement for the
messages it sent. AppManager should not attempt to overcome this behaviour.

From the side of the remote receiver Application: The Application receives a
MessageReceived message, with some messageId. The Application should then
respond with a RespondIncomingMessage with the same messageId. This is the way
of the Application to acknowledge the receipt of this incoming messages.

If the AppManager sends a MessageReceived message to an Application, and the
Application crashes, AppManager should create its own RespondIncomingMessage
with `ResponseData::noListeningApp`, and charge 0 credits.


It is crucial for Applications to acknowledge incoming messages
(Using RespondIncomingMessage).  Only by acknowledging an incoming message,
frozen credits are freed along the neighbors route from the remote node to the
Application node. If the messsage is not acknowledged, credits will stay frozen
forever (Until the Application crashes, or until CSwitch crashes). 

If an Application does not acknowledge many messages, eventually the route from
the remote node to the Application's node will be clogged by frozen credits,
and no messages will not be able to be sent.

Some requests allow the receipient to charge a fee. The fee will not be
received until the message is acknowledged. The recipient can choose how much
out of the provided fee he may charge. In addition, it might be possible for
the reciever to send back a response (inside the acknowledgement message). The
response bytes are already payed for by the original sender of the request
message. The amount of response bytes available for use by the receiver is
predetermined by the original sender, as he is the one paying for those bytes.


TODO

## Sending payments

TODO


## Behaviour on special cases

TODO: What should be done in the following cases:

- IndexerClient disconnects.
- Timeout when asking for a route from IndexerClient.


