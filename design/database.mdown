# Database design
03.01.2018

## Introduction 

The CSwitch requires persistency to make sure the mutual credit management
between neighbors and friends remain consistent, despite possible failures.


## Initialization

The database is initialized given a path to a database.
This path will probably of a form similar to: ..../db_{public_key}.db


## Neighbors Token Channel Data model

**Neighbors** table

- neighborPublicKey         (blob, primary key)
- wantedRemoteMaxDebt       [8 bytes]
- wantedMaxChannels         [4 bytes]
- status                    (Enabled/Disabled)

Removal of a Neighbor entry should cause removal of the relevant
NeighborTokenChannels entries. TODO: Can this be done in sqlite?


**NeighborTokenChannels** table

- primary key pair
    - neighborPublicKey     (foreign key to Neighbors)
    - tokenChannelIndex            [4 bytes?]

- moveTokenType (incoming / outoing)
- moveTokenTransactions     (blob?)
- moveTokenOldToken         [32 bytes]
- moveTokenRandNonce        [32 bytes]

- remoteMaxDebt             [8 bytes]
- localMaxDebt              [8 bytes]
- remotePendingDebt         [8 bytes]
- localPendingDebt          [8 bytes]
- balance                   [8 bytes]

- localFundsRandNonce       [32 bytes]  (Can be null)
- remoteFundsRandNonce      [32 bytes]  (Can be null)

Removal of a NeighborTokenChannels entry should cause removal of the relevant
NeighborLocalRequests entries. TODO: Can this be done in sqlite?

TODO: Is it possible to use a foreign key as part of a primary key? (See
primary key pair of NeighborTokenChannels). Is there a simpler way to do this?


**NeighborLocalRequests** table

- neighborTokenChannel  (NeighborTokenChannel primary key)
- requestId             (primary key)
- route                 (blob)
- requestType           (CommMeans / Encrypted)
- requestContentHash = Sha512/256(requestContent)  [32 bytes]
- maxResponseLength             [4 bytes]
- processingFeeProposal         [8 bytes]
- halfCreditsPerByteProposal    [4 bytes]



## Interface with the Networker


**StoreNeighbor** [Networker -> Database]

- neighborPublicKey         [32 bytes]
- wantedRemoteMaxDebt       [8 bytes]
- wantedMaxChannels         [4 bytes]
- status                    (Enabled/Disabled)

**RemoveNeighbor** [Networker -> Database]

- neighborPublicKey         [32 bytes]


**RequestLoadNeighbors** [Networker -> Database]

- (empty)


**ResponseLoadNeighbors** [Database -> Networker]

- List
    - neighborPublicKey         [32 bytes]
    - wantedRemoteMaxDebt       [8 bytes]
    - wantedMaxChannels         [4 bytes]
    - status                    (Enabled/Disabled)


**StoreInNeighborToken** [Networker -> Database]

- neighborPublicKey             [32 bytes]
- tokenChannelIndex             [4 byte]
- moveTokenMessage (incoming)
    - moveTokenTransactions     (blob?)
    - moveTokenOldToken         [32 bytes]
    - moveTokenRandNonce        [32 bytes]
- remoteMaxDebt                 [8 bytes]
- localMaxDebt                  [8 bytes]
- remotePendingDebt             [8 bytes]
- localPendingDebt              [8 bytes]
- balance                       [8 bytes]
- localFundsRandNonce           [32 bytes]  (Can be null)
- remoteFundsRandNonce          [32 bytes]  (Can be null)
- closedLocalRequests (List)
    - requestId                 [16 bytes]


PendingLocalNeighborRequest

- requestId                     [16 bytes]
- route
- requestContentHash = Sha512/256(requestContent)  [32 bytes]
- maxResponseLength             [4 bytes]
- processingFeeProposal         [8 bytes]
- halfCreditsPerByteProposal    [4 bytes]



**StoreOutNeighborToken** [Networker -> Database]

- neighborPublicKey             [32 bytes]
- tokenChannelIndex             [4 byte]
- moveTokenMessage (outgoing)
    - moveTokenTransactions     (blob?)
    - moveTokenOldToken         [32 bytes]
    - moveTokenRandNonce        [32 bytes]
- remoteMaxDebt                 [8 bytes]
- localMaxDebt                  [8 bytes]
- remotePendingDebt             [8 bytes]
- localPendingDebt              [8 bytes]
- balance                       [8 bytes]
- localFundsRandNonce           [32 bytes]  (Can be null)
- remoteFundsRandNonce          [32 bytes]  (Can be null)
- openedLocalRequests (List of PendingLocalNeighborRequest)


**RequestLoadNeighborToken** [Networker -> Database]

- neighborPublicKey             [32 bytes]
- tokenChannelIndex             [4 byte]


**ResponseLoadNeighborToken** [Database -> Networker]

- neighborPublicKey             [32 bytes]
- tokenChannelIndex             [4 byte]
- moveTokenMessageType
    - incoming
    - outgoing
- moveTokenMessage (incoming/outgoing)
    - moveTokenTransactions     (blob?)
    - moveTokenOldToken         [32 bytes]
    - moveTokenRandNonce        [32 bytes]
- remoteMaxDebt                 [8 bytes]
- localMaxDebt                  [8 bytes]
- remotePendingDebt             [8 bytes]
- localPendingDebt              [8 bytes]
- balance                       [8 bytes]
- localFundsRandNonce           [32 bytes]  (Can be null)
- remoteFundsRandNonce          [32 bytes]  (Can be null)
- pendingLocalRequests (List of PendingLocalRequest)


## Friends Token Channel Data model

**Friends** table

- friendPublicKey           (blob, primary key)
- wantedRemoteMaxDebt       [16 bytes]
- status                    (Enabled/Disabled)

**FriendTokenChannels**

- friendPublicKey           (blob, link to Friends, primary key)
- moveTokenType             (incoming / outoing)
- moveTokenTransactions     (blob?)
- moveTokenOldToken         [32 bytes]
- moveTokenRandNonce        [32 bytes]
- remoteMaxDebt             [8 bytes]
- localMaxDebt              [8 bytes]
- remotePendingDebt         [8 bytes]
- localPendingDebt          [8 bytes]
- balance                   [8 bytes]
- localState                (RequestsEnabled/RequestsDisabled)
- remoteState               (RequestsEnabled/RequestsDisabled)


Removal of a Friends entry should cause removal of the relevant
FriendLocalRequests entries. TODO: Can this be done in sqlite?


**FriendLocalRequests** table

- friendPublicKey               (link to Friends)
- requestId                     (primary key)
- route                         (blob)
- mediatorPaymentProposal       [8 bytes]
- invoiceId                     [32 bytes]
- destinationPayment            [16 bytes]


## Interface with the Funder

**StoreFriend** [Funder -> Database]

- friendPublicKey           [32 bytes]
- wantedRemoteMaxDebt       [16 bytes]
- status                    (Enabled/Disabled)


**RemoveFriend** [Funder -> Database]

- friendPublicKey           [32 bytes]


**RequestLoadFriends** [Funder -> Database]

- (empty)


**ResponseLoadFriends** [Database -> Funder]

- List
    - friendPublicKey           [32 bytes]
    - wantedRemoteMaxDebt       [16 bytes]
    - status                    (Enabled/Disabled)


**StoreInFriendToken** [Funder -> Database]

- friendPublicKey           [32 bytes]
- moveTokenMessage
    - moveTokenTransactions     (blob?)
    - moveTokenOldToken         [32 bytes]
    - moveTokenRandNonce        [32 bytes]
- remoteMaxDebt                 [8 bytes]
- localMaxDebt                  [8 bytes]
- remotePendingDebt             [8 bytes]
- localPendingDebt              [8 bytes]
- balance                       [8 bytes]
- localState                    (RequestsEnabled/RequestsDisabled)
- remoteState                   (RequestsEnabled/RequestsDisabled)
- closedLocalRequests (List)
    - requestId                 [16 bytes]


PendingLocalFriendRequest

- requestId                     [16 bytes]
- route
- mediatorPaymentProposal       [8 bytes]
- invoiceId                     [32 bytes]
- destinationPayment            [16 bytes]


**StoreOutFriendToken** [Funder -> Database]

- friendPublicKey           [32 bytes]
- moveTokenMessage
    - moveTokenTransactions     (blob?)
    - moveTokenOldToken         [32 bytes]
    - moveTokenRandNonce        [32 bytes]
- remoteMaxDebt                 [8 bytes]
- localMaxDebt                  [8 bytes]
- remotePendingDebt             [8 bytes]
- localPendingDebt              [8 bytes]
- balance                       [8 bytes]
- localState                    (RequestsEnabled/RequestsDisabled)
- remoteState                   (RequestsEnabled/RequestsDisabled)
- openedLocalRequests (List of PendingLocalFriendRequest)


**RequestLoadFriendToken** [Funder -> Database]

- friendPublicKey           [32 bytes]


**ResponseLoadFriendToken** [Database -> Funder]

- friendPublicKey           [32 bytes]
- moveTokenMessageType
    - incoming
    - outgoing
- moveTokenMessage
    - moveTokenTransactions     (blob?)
    - moveTokenOldToken         [32 bytes]
    - moveTokenRandNonce        [32 bytes]
- remoteMaxDebt                 [8 bytes]
- localMaxDebt                  [8 bytes]
- remotePendingDebt             [8 bytes]
- localPendingDebt              [8 bytes]
- balance                       [8 bytes]
- localState                    (RequestsEnabled/RequestsDisabled)
- remoteState                   (RequestsEnabled/RequestsDisabled)
- pendingLocalRequests (List of PendingLocalFriendRequest)



## Indexer client data model

**IndexingProviders** table

- indexingProviderId (blob 16 bytes, Primary key)
- chainLink (blob)
- lastRoutes (blob)
- status (Enabled/Disabled)

TODO: Should we split the chain link into its components?


## Interface with the IndexerClient


**StoreIndexingProvider** [IndexerClient -> Database]

- indexingProviderId    [16 bytes]
- chainLink
- status (Enabled/Disabled)


**RemoveIndexingProvider** [IndexerClient -> Database]

- indexingProviderId    [16 bytes]


**RequestLoadIndexingProviders** [IndexerClient -> Database]

- (empty)


**ResponseLoadIndexingProviders** [Database -> IndexerClient]

- List:
    - indexingProviderId [16 bytes]
    - lastRoutes
    - chainLink
    - status


**StoreRoute** [IndexerClient -> Database]

- indexingProviderId [16 bytes]
- route

