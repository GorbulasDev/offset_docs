# Networker design

10.12.2017
Required prior reading: 0_credit_clearing.mdown


## Introduction

The Networker component is the interface used by all other components for
sending and receiving messages in the CSwitch network. In addition, it is
responsible for mutual credit management against the Networkers of the
node's neighbors.

The Networker is the core component of the CSwitch client. It performs the
"magic" that allows secure exchange of communication and credit.


## Introduction to Token Channels

Consider the Networkers of two neighbor nodes A and B. A and B manage mutual
credit. A sends a few messages, some of which should increase A's balance with
respect to B. At the same time B sends a few message, some of which should
increase B's balance with respect to A.

If any of A or B crash in the middle of the messages transfer, it can become
difficult to find out what is the current credit balance between A and B,
which messages were received by any of the parties, and possibly which messages
need to be resent.

We choose the following conservative solution: At each given time only one of
the nodes A and B is allowed to send a message. In other words: A and B take
turns in sending messages. For example, when it is A's turn to send a message,
B is waiting for a message to arrive from A. B can not send any message before
it has received A's message. 

We introduce here a simplified structure of Token Channels. This will allow us
to discuss the resistance to failures this structure provides without dealing
with other details of the Networker.

Given two parties A and B, to make sure B doesn't send his message before A's
message was received, B has to include in his message a hash over A's message.
A's message contains a random nonce, therefore B can not produce a valid
message until it receives A message.

Therefore, the messages sent between A and B will be of the following format:

MoveToken

- contents
- oldToken
- randNonce

contents contains the actual message contents. oldToken is the hash over the
previously received message. randNonce is a randomly generated nonce, generated
by the sender of the message. The first ever message between A and B could be
initialized with a random value for oldToken. At any time, we call the party
whose turn to send a message the party that **holds the token**.

If the party A that holds the token doesn't have anything to send, it will wait.
This could block the remote party B (Who does not hold the token) from sending
messages. The remote B party could request access to the token by sending A a
message requesting the token:

RequestToken

- (empty)

A will then respond with a MoveToken message, possibly with empty contents. If
A believes that he does not own the token, A will send B the last MoveToken
message he sent B.

We call this form of communication between A and B a simple **Token Channel**.

To allow recovering from crashes of any of the parties and possible
communication problems, we add the following persistency feature: The last
MoveToken message seen is saved in long term memory. This could be the last
MoveToken message that was sent, or the last MoveToken message that was
received.

For atomicity, an outgoing MoveToken message is saved in long term memory
before it is sent. An incoming MoveToken message is saved in long term memory
only after it was fully processed.


The following algorithm is used for a party A in a Token Channel:

- Upon startup
    - If MA is an outgoing message:
        - Send MA

- Upon request to send a message
    - If MA is an incoming MoveToken:
        - Set MA = MoveToken(message) (outgoing)
        - Send MA
    - Else:
        - Send RequestToken 
        - Report Not Ready

- Upon data received:
    - If data is MT := MoveToken(message):
        - If MA is an incoming message:
            - If MT == MA: 
                - discard message
            - Else:
                - Report Token Channel inconsistency
        - Else:
            - If MT.oldToken == hash(MA):
                - process(MT)
                - set MA = MT (incoming)
                - Report message received (MT)
            - Else:
                - If MA.oldToken == hash(MT)
                    - Send MA
                - Else:
                    - Report Token Channel inconsistency
    - Else (data is RequestToken):
        - If MA is an outgoing message:
            - discard message
        - Else: (MA is an incoming message)
            - Set MA = MoveToken(emptyMessage) (outgoing)
            - Send MA


TODO: Add here a proof that the Token Channel algorithm is sound in the
fail-stop adversarial model:

- At any give time at most one party thinks that it "holds the token".
- Token Channel inconsistency should never happen.



## Networker Token Channels

Networkers communicate using Token Channels to ensure resistance to failure
situations. The protocol used between Networkers is based on the ideas from the
previous section, with a few enhancements. These are the messages used for
Token Communication between Networkers of neighbor nodes:

**NeighborRequestToken**

- tokenIndex            [2 bytes]


**NeighborMoveToken**

- tokenIndex            [2 bytes]
- transactions
- newBalance            [8 bytes]
- oldToken              [32 bytes]
- randNonce             [32 bytes]


tokenIndex is the current token channel in use.

Using a single Token Channel for communication could be very inefficient. This
is because only one message could be sent over the channel at any given time.
To overcome this problem while still having the fail-stop guarantees of a token
channel, we use multiple token channels.

Therefore Networkers of neighbor nodes will usually communicate using a few
token channels simultaneously. The amount of token channels to be used is
configurable (It is configured through the plugin manager). tokenIndex
represents the current Token Channel in use.

The transactions field may contain zero or more transactions. A transaction
can be one of the following:

- SetNeighborCapacity
- LoadFunds
- OpenNeighborTokenChannel
- RequestSendMessage
- ResponseSendMessage
- FailedSendMessage
- CloseNeighborTokenChannel

We allow sending a few transactions in one NeighborMoveToken message to avoid
having to wait for the token to come back to us for every single transaction.
TODO: There should be a maximum size for the transactions field.

Sending NeighborMoveToken with zero transactions can be used to move the token
to the remote Networker.

The newBalance field contains the new credit balance between the two parties
after all the transactions have been processed, from the point of view of the
sender. When a receiver receives balance `b`, it should interpret it as balance
`-b`.

oldToken is the hash of the previously received NeighborMoveToken message.

randNonce is a random nonce generated by the sender. Using a random nonce makes
sure that the remote side can not create a new valid NeighborMoveToken message
before it has received a previous NeighborMoveToken message.


TODO: Continue here.




## Interface with the Channeler

The Networker relies on the Channeler component for the ability to communicate
with the Networkers of direct neighbors. 

```
Networker             Networker
   |                     ^
   |                     |
   V                     |
Channeler ----------> Channeler
```

This is done using the messages:

**ChannelOpened** (Channeler -> Networker)

- remotePublicKey


**ChannelClosed** (Channeler -> Networker)

- remotePublicKey


**SendChannelMessage** (Networker -> Channeler)

- remotePublicKey
- tokenChannelIndex
- messageContent

 
**ChannelMessageReceived** (Channeler -> Networker)

- remotePublicKey
- messageContent



ChannelOpened is a message sent Channeler to the Networker, notifying that a
new communication channel is available from the Networker to the Networker of a
remote node. ChannelClosed message means that the channel was closed.

SendChannelMessage is a message sent from the Networker to the Channeler,
allowing to send a message to a Networker of a remote neighbor.
tokenChannelIndex is a hint to the Channeler, specifying the index number of
the token channel used for the underlying message. 

In case the Channeler is using an implementation of multiple TCP connections,
the tokenChannelIndex hint can be used to help divide messages to different TCP
connections to the remote neighbor.

ChannelMessageReceived is a message sent from the Channeler to the Networker,
notifying about the receipt of a new message from a Networker of a remote
neighbor.


Note that synchronization issues are possible: It is possible that the
Networker is sending a SendChannelMessage to the Channeler, while at the same time
the Channeler is sending a ChannelClosed message to the Networker. 

It might happen that the Networker and the Channeler have seen the events in
different order: The Channeler closed the TCP connections before the message
could be sent, while the Networker believes that he sent the SendChannelMessage
message to the Channeler before the channel was closed.

This is not a problem though, because the Networker uses token based communication.
The Networker always remembers the last message he attempted to send over a
token channel. If later the Networker finds that the remote Networker did not
received the message, it will send it again.

The Networker has the responsibility of configuring the Channeler.
This is done using the following messages:


**AddNeighborRelation**

- neighborPublicKey
- socketAddr (Optional)
- maxChannels

(TODO: This message is not exactly the same as the one in `inner_messages.rs`)

**RemoveNeighborRelation**

- neighborPublicKey


**SetNeighborMaxChannels**

- neighborPublicKey
- maxChannels


The message AddNeighborRelation allows to add a new neighbor with a few
parameters. neighborPublicKey is the public key of the remote neighbor.
socketAddr is an optional field, containing the remote IP and port of the
neighbor, used for TCP connection. If this field is left blank, the remote
neighbor is expected to know our address and initiate connection.
maxChannels should match the amount of token channels used to communicate with
this neighbor. This number will be used internally by the Channeler to optimize
the communication for the transport of token channels.

The message RemoveNeighborRelation removes a neighbor according to its public
key. The message SetNeighborMaxChannels changes the amount of maxChannels
parameter.


## Basic Networker configuration


The networker can be configured through the PluginManager component using the
following messages:


**AddNeighbor**

- neighborPublicKey
- socketAddr
- channelCapacity
- maxTokenChannels


**RemoveNeighbor**

- neighborPublicKey


**SetNeighborChannelCapacity**

- neighborPublicKey
- channelCapacity


**SetNeighborMaxTokenChannels**

- neighborPublicKey
- maxTokenChannels


The Networker's configuration is forwarded to the Channeler, in the form of the
corresponding messages: AddNeighborRelation, RemoveNeighborRelation,
SetNeighborMaxChannels.  Note that the Channeler is not given information about
channelCapacity of the token channels.

The Networker's configuration does not persist (It is kept on RAM). Therefore
the Networker has to be configured every time it is started through the
PluginManager component.









TODO:

- Service that Networker supplies to other components.
- The protocol between Networkers (Transported using the Channeler)
    - Dealing with invalid move token requests
- Dependence on the Funder for transfer of funds, to free communication capacity.
- The Networker multiplexes incoming messages to: IndexerClient, Funder,
    PluginManager
- Write about networker persistency
    - What should be persisted?
    - How to do this?



