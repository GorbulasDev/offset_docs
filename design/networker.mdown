# Networker design

10.12.2017
Required prior reading: 0_credit_clearing.mdown


## Introduction

The Networker component is the interface used by all other components for
sending and receiving messages in the CSwitch network. In addition, it is
responsible for mutual credit management against the Networkers of the
node's neighbors.

The Networker is the core component of the CSwitch client. It performs the
"magic" that allows secure exchange of communication and credit.


## Introduction to Token Channels

Consider the Networkers of two neighbor nodes A and B. A and B manage mutual
credit. A sends a few messages, some of which should increase A's balance with
respect to B. At the same time B sends a few message, some of which should
increase B's balance with respect to A.

If any of A or B crash in the middle of the messages transfer, it can become
difficult to find out what is the current credit balance between A and B,
which messages were received by any of the parties, and possibly which messages
need to be resent.

We choose the following conservative solution: At each given time only one of
the nodes A and B is allowed to send a message. In other words: A and B take
turns in sending messages. For example, when it is A's turn to send a message,
B is waiting for a message to arrive from A. B can not send any message before
it has received A's message. 

We introduce here a simplified structure of Token Channels. This will allow us
to discuss the resistance to failures this structure provides without dealing
with other details of the Networker.

Given two parties A and B, to make sure B doesn't send his message before A's
message was received, B has to include in his message a hash over A's message.
A's message contains a random nonce, therefore B can not produce a valid
message until it receives A message.

Therefore, the messages sent between A and B will be of the following format:

MoveToken

- contents
- oldToken
- randNonce

contents contains the actual message contents. oldToken is the hash over the
previously received message. randNonce is a randomly generated nonce, generated
by the sender of the message. At any time, we call the party
whose turn to send a message the party that **holds the token**.

If the party A that holds the token doesn't have anything to send, it will wait.
This could block the remote party B (Who does not hold the token) from sending

We call this form of communication between A and B a simple **Token Channel**.

To allow recovering from crashes of any of the parties and possible
communication problems, we add the following persistency feature: The last
MoveToken message seen is saved in long term memory. This could be the last
MoveToken message that was sent, or the last MoveToken message that was
received.

For atomicity, an outgoing MoveToken message is saved in long term memory
before it is sent. An incoming MoveToken message is saved in long term memory
only after it was fully processed.


For the beginning of a Token Channel we use some method of tie breaking to
determine which party will have the token first. Tie breaking is done by
comparing hash(publicKey) for both parties (We assume here that each party
knows the public key of itself and the remote party).

The first message sent by a party is decided according to the tie breaking
result. If `hash(localPublicKey) < hash(remotePublicKey)` then the first
message sent by the party will be of the form:

```
FirstMoveTokenLower {
    contents = Empty
    oldToken = hash(localPublicKey)
    randNonce = hash(remotePublicKey)
}
```

For the other side (with the higher hash value), this will be the first
message:

```
FirstMoveTokenHigher {
    contents = Empty
    oldToken = hash(FirstMoveTokenLower)
    randNonce = random
}
```



The following algorithm is used for a party A in a Token Channel:

- Upon startup:
    - If MA is empty (Initialization of Token Channel):
        - If `hash(localPublicKey) < hash(remotePublicKey)`:
            - Set MA = MoveToken 
                - contents = Empty
                - oldToken = hash(localPublicKey)
                - randNonce = hash(remotePublicKey)
            - Send MA
        - Else:
            - Set MA = MoveToken
                - contents = Empty
                - oldToken = hash(Empty || hash(localPublicKey) || hash(remotePublicKey))
                - randNonce = random
            - sendMA

    - ElseIf MA is an outgoing message:
        - Send MA

- Upon time tick:
    - If MA is an outgoing message:
        - If no activity happened for a while:
            - Send MA

- Upon request to send a message:
    - If MA is an incoming MoveToken:
        - Set MA = MoveToken(message) (outgoing)
        - Send MA
    - Else:
        - Report Not Ready

- Upon data received:
    - If MA is an incoming message:
        - If MT == MA: 
            - Discard message
        - Else:
            - Discard message
            - Report inconsistency
    - Else: (MA is an outgoing message)
        - If MT.oldToken == hash(MA):
                - process(MT)
                - set MA = MT (incoming)
                - Report message received (MT)
        - Else:
            - If MA.oldToken == hash(MT)
                - Send MA
            - Else:
                - Discard message
                - Report inconsistency


TODO: Add here a proof that the Token Channel algorithm is sound in the
fail-stop adversarial model:

- At any give time at most one party thinks that it "holds the token".
- Token Channel inconsistency should never happen if data and code are not
    corrupted.


## Persistent representation of a Token Channel

A Networker Token Channel has a representation in long term memory of the
following form:

- lastNeighborMoveToken (incoming or outgoing)
- remoteMaxDebt [8 bytes]
- localMaxDebt [8 bytes]
- remotePendingRequests [8 bytes]
- localPendingRequests [8 bytes]
- balance [8 bytes]
- pendingRequests (A list of requests)
- isInconsistent
    - Yes
        - inconsistentMessage (Sent\Received)
    - No


lastNeighborMoveToken is the last seen NeighborMoveToken message, either
incoming or outgoing. This field is written right after sending a
neighborMoveToken, or after receipt and processing of an incoming
neighborMoveToken.

remoteMaxDebt is the maximum debt the remote party can have in this channel.
Initially this value equals 0.

localMaxDebt is the maximum debt the local party can have in this channel.
Initially this value equals 0.

remotePendingRequests is the total required credit for payment of future
response messages from the remote party.

localPendingRequests is the total amount of credit expected to be earned from
future response messages sent to the remote party.


The relationship between the mentioned fields for a Token Channel:


```
      balance - localPendingR  balance       balance + remotePendingR
                      |          |                |
    ----------[-------(----------*----------------)------------]--------->
              |                                                |
    -localMaxDebt                                   RemoteMaxDebt
```

At all times:

```
-localMaxDebt  
    <= balance - localPendingRequests
    <= balance
    <= balance + remotePendingRequests
    <= remoteMaxDebt
```

pendingRequests contain a list of all requests opened against the remote party
but not yet completed.  TODO: Write about request fields.


## Networker Token Channels

Networkers communicate using Token Channels to ensure resistance to failure
situations. The protocol used between Networkers is based on the ideas from the
previous section, with a few enhancements. These are the messages used for
Token Communication between Networkers of neighbor nodes:


**NeighborMoveToken**

- tokenChannelIndex     [1 byte]
- transactions
- oldToken              [32 bytes]
- randNonce             [32 bytes]


**NeighborInconsistencyError**

- tokenChannelIndex     [1 byte]
- currentToken          [32 bytes]
- balanceForReset       [8 bytes]



tokenChannelIndex is the current token channel in use.

Using a single Token Channel for communication could be very inefficient. This
is because only one message could be sent over the channel at any given time.
To overcome this problem while still having the fail-stop guarantees of a token
channel, we use multiple token channels.

Therefore Networkers of neighbor nodes will usually communicate using a few
token channels simultaneously. The amount of token channels to be used is
configurable (It is configured through the plugin manager). tokenChannelIndex
represents the current Token Channel in use.

The transactions field may contain zero or more transactions. A transaction
can be one of a few predefined types.

We allow sending a few transactions in one NeighborMoveToken message to avoid
having to wait for the token to come back to us for every single transaction.
TODO: There should be a maximum size for the transactions field.

Sending NeighborMoveToken with zero transactions can be used to move the token
to the remote Networker.

oldToken is the hash of the previously received NeighborMoveToken message.

randNonce is a random nonce generated by the sender. Using a random nonce makes
sure that the remote side can not create a new valid NeighborMoveToken message
before it has received a previous NeighborMoveToken message.


## Token Channel inconsistency

Whenever a NeighborMoveToken message is received, the receiving party verifies the
token hashes. In addition, all the transactions are verified.

If the token hashes or any transaction are invalid, an inconsistency is
reported to the remote party using a NeighborInconsistencyError, and to the
PluginManager using an InvalidNeighborMoveToken message.

Whenever a NeighborInconsistencyError message is received, the Networker
passes the information about the inconsistency to the PluginManager. In
addition, the token channel is marked as inconsistent in long term memory. It
will not be able to receive any further messages, or be used to send messages.

Upon receipt of a first NeighborInconsistencyError, a node should also respond
with a NeighborInconsistencyError message, specifying his terms for a channel
reset.

Any further message (That is not a ResetChannelTran or NeighborInconsistencyError
message) to the inconsistent channel will have as a response a
NeighborInconsistencyError message, containing the token channel index,
currentToken equals the same currentToken received at the
NeighborInconsistencyError message, and balanceForReset is the credit balance
required for channel reset, equals to `balance + remotePendingR`.

Further incoming NeighborInconsistencyError messages will be ignored. 

The channel may become operational again when a ResetChannelTran transaction inside
a MoveToken message is received with the required balance for reset (balance is
from the point of view of the sender of the message). oldToken is expected to
equal currentToken.

Note that an inconsistency may occur again if both sides send a
ResetChannelTran transaction at about the same time. 


A channel can be reset manually from the PluginManager using the message:

ResetNeighborChannel

- neighborPublicKey
- tokenChannelIndex


## Token Channel Transaction types

The following transactions types are available for sending inside the
transactions field of a NeighborMoveToken message.

- setRemoteMaxDebtTran
- FundsRandNonceTran
- LoadFundsTran
- RequestSendMessageTran
- ResponseSendMessageTran
- FailedSendMessageTran
- ResetChannelTran


We describe here in detail each of those messages:

**SetRemoteMaxDebtTran**

- remoteMaxDebt [8 bytes]

Set the maximum debt possible for the remote party. Note that `balance +
remotePendingRequests <= remoteMaxDebt`, hence it is not possible to set
`remoteMaxDebt` to a value lower than `balance  + remotePendingRequests`.

The dual localMaxDebt can only be set by the remote party.


**FundsRandNonceTran**

- fundsRandNonce [16 bytes]


Send to the remote party of the token channel a random funds nonce. 
The fundsRandNonce is a countermeasure against replay attacks when topping up
balance using the LoadFundsTran message.

The remote party then uses this random nonce as follows:

1. Send a payment to us with a message containing the random funds nonce.
2. Receive a signed payment receipt.
3. Send to us a LoadFundsTran message containing the signed receipt.

Looking at the receipt attached to the LoadFundsTran message, we should be able to
know that the payment receipt was never used before.

After a payment receipt is used to top up balance in the token channel, the
random nonce is invalidated. This makes sure that the same payment receipt will
not be used again in the future.

A new random nonce will be sent the the remote party using the FundsRandNonce
message in the future.

Note that sending two FundsRandNonce messages, when the first fundsRandNonce
was never used will cause an inconsistency. This is because the remote party
may have already begun a payment transaction using the old fundsRandNonce.


**LoadFundsTran**

- paymentReceipt (TODO: Find out real structure)
    - fundsRandNonce
    - paymentId     [?]
    - numCredits    [?]
    - signature     [?]


This message allows to top up the credit balance by using an external funds
transfer. This is important because in most cases the credit balance between
two neighbors will drift to one of the parties, as the two parties most likely
don't send the same amount of messages in the same frequency.

To send this message the sender first needs to send a payment to the remote
node, getting back a receipt. Then the receipt is used to top up the balance in
the Token Channel using a LoadFundsTran message.

The LoadFundsTran transaction increases the balance of the sender by numCredits.
Note that `balance + numCredits + remotePendingRequests` must be at most
`remoteMaxDebt`, therefore `numCredits <= remoteMaxDebt - balance -
remotePendingRequests`.

If numCredits is too large with respect to the current `remoteMaxDebt`, it is
possible to send this message prefixed with a setRemoteMaxDebt message, to
increase `remoteMaxDebt`.

This is useful in cases where the Networker has decided on an amount of credits
to top up a Token Channel, however, the balance has changed until the request
to send funds to the remote node has completed.


EncContent

- senderPublicKey           [32 bytes]
- keyDerivationNonce        [32 bytes]
- encryptedContent: Encrypt{key=derivedSymmetricKey, nonce=random}(
    recipientTimestamp, senderTimestamp, messageContent)

**RequestSendMessageTran**

- requestId                     [16 bytes]
- nodeIdPath
- requestContent: EncContent
- maxResponseLength             [4 bytes]
- processingFeeProposal         [8 bytes]
- halfCreditsPerByteProposal    [4 bytes]


RequestSendMessageTran transaction message opens a communication transaction with a
neighbor, requesting to pass a message to a remote node on the CSwitch network. 
requestId is the identification number of request, generated randomly by
the initiator of the request.

nodeIdPath is a path of nodes. Each node is stored as
`sha512(nodePublicKey)[0:8]`, the first 8 bytes of the hash the node's public
key. This makes the representation of nodes shorter on the path of nodes, while
still making it very unlikely to have a collision between nodes' representations.
The last node on the path is the destination node.

requestContent contains an encrypted message to be sent to the remote node.
It is of type EncContent. 

EncContent contains the senderPublicKey and keyDerivationNonce. These are used
for static diffie-hellman between the originator of the request and the
destination node. Together the two parties derive a symmetric key used for
encryption/decryption of messages from the originator of the request to the
remote party. (The other side of communication will have a different symmetric
key).

EncContent also contains encryptedContent: The actually encrypted message,
together with a recent recipientTimestamp and the last senderTimestamp,
mechanisms used to avoid replay attacks.

maxResponseLength is the maximum amount of bytes allowed for the response.
There is a limit for this amount of bytes because credit is frozen when the
request is being forwarded, and nodes need to know ahead of time how much
credit to freeze.

processingFeeProposal is the amount of credits proposed for the destination
node to generate a signed ResponseSendMessage. Usually processingFee is offered
in cases where issuing a response message takes some effort from the
destination node (For example: Having to calculate something).

halfCreditsPerByteProposal is half the amount of credits proposed for sending
one byte of this request. All the bytes of the request are counted (including
the requestId field, the nodeIdPath field etc).

In case of a failure on delivering the request, only half the amount of credits
proposed will be payed to the intermediate nodes. This is why the field name is
is halfCreditsPerByteProposal, and not "creditsPerByteProposal".

We define:

```
paymentOnSuccess(responseLength) := (length(request) + responseLength) * 
        halfCreditsPerBytesProposal * 2 *
        (amountOfNodesToDest - 1) + 
    processingFeeProposal + 
    length(request) +
    (maxResponseLength - responseLength)
```

to be the payment received for a successful transaction (This payment happens
when the transaction is completed: when a ResponseSendMessage is sent).
amountOfNodesToDest is the amount of nodes on nodeIdPath from A to the
destination node. If A is the destination node, amountOfNodesToDest = 1

Note that destNode is incentivized to generate as small as possible response
message. The payment promised for the destination node is:

```
processingFeeProposal + length(request) + (maxResponseLength - responseLength)
```


Whenever A's Networker sends a RequestSendMessageTran to B's Networker, A's
Networker inserts the request into pendingRequests. In addition,
localPendingRequests is increased by:

```
maxPaymentOnSuccess := 
    max(paymentOnSuccess(minResponseLength), 
        paymentOnSuccess(maxResponseLength))
```

Note that the maximum of `paymentOnSuccess(x)` should be found on one of the
edges of the boundary, because of linearity of `paymentOnSuccess`.


Note that it is not possible to send this request message if this causes
`balance - localPendingRequests` to be smaller than `-localMaxDebt`. Attempting
to do so will cause a token channel inconsistency.

Upon receipt of the RequestSendMessageTran message, B's Networker increases
remotePendingRequests by the same amount.


**ResponseSendMessageTran**

- requestId
- responseContent: EncContent
- Signature{key=recipientKey}(originalRequestSendMessageTran || responseContent)

TODO: Use some kind of HMAC to combine the two hashes instead of using simple
concatenation. Those could cause security issues.

The ResponseSendMessage transaction message can be created by the destination
node of a request.

requestId is the requestId of the original received request.

responseContent is an encrypted message sent back to the originator of the
request. 

The total length of ResponseSendMessage must not exceed maxResponseLength as
specified in the request.


Whenever A's Networker sends a ResponseSendMessage to B's Networker, A's
Networker does the following:

- Increases balance by `paymentOnSuccess`
- Decreases localPendingRequests by `maxPaymentOnSuccess`.

Upon receipt of the ResponseSendMessage by B's Networker, it does the
following:

- Removes the request from the pending requests list.
- Decreases balance by `paymentOnSuccess`.
- Decreases remotePendingRequests by `maxPaymentOnSuccess`.

On the other hand, if the received ResponseSendMessage is invalid, an
inconsistency occurs.


**FailedSendMessageTran**

- requestId
- reportingNodePublicKey
- Signature{key=reportingNodePublicKey}(originalRequestSendMessageTran)


requestId is the requestId of the original request. reportingNodePublicKey is
the public key of the node who initiated the FailedSendMessage. This node
should be one of the nodes on the nodeIdPath.

We define:

```
paymentOnFailure := length(request) * halfCreditsPerBytesProposal *
        amountOfNodesToReportingNode
```

Where amountOfNodesToReportingNode is the amount of nodes from A to the
reporting Node in nodeIdPath. If A is the reporting node,
amountOfNodesToReportingNode = 1.


When A's Networker sends a FailedSendMessage to B's Networker, A's Networker
does the following:

- Increases balance by `paymentOnFailure`
- Decreases localPendingRequests by `maxPaymentOnSuccess`.

Upon receipt of the FailedSendMessage by B's Networker, it does the following:

- Removes the request from the pending requests list.
- Decreases balance by `paymentOnFailure`.
- Decreases remotePendingRequests by `maxPaymentOnSuccess`.


**ResetChannelTran**

- newBalance

newBalance is the new proposed balance for the channel from the point of view
of the sender. (The receiver has to change the sign of this value).

This message could be sent on two occasions:

- To solve an inconsistency. The NeighborInconsistencyError specifies
    currentToken, which should be used as oldToken in the MoveToken message
    containing this ResetChannelTran transaction message. In addition, newBalance
    should match the balanceForReset field of the NeighborInconsistencyError
    message.

- To clean up local pending requests. The remote Networker expects to earn
    credit for fulfilling the pending requests in the future. It is possible to
    pay the remote Networker now (by changing the balance) and ask him to
    forget about all the pending requests. 


After a valid newBalance transaction message is sent from A's Networker to B's
Networker, the following values will be set from A's point of view:

- lastNeighborMoveToken will be an outgoing ResetChannelTran message.
- balance = newBalance
- remoteMaxDebt = max(newBalance, 0)
- localMaxDebt = min(newBalance, 0)
- remotePendingRequests and localPendingRequests are empty.
- pendingRequests list is empty.


## Interface with the Channeler

The Networker relies on the Channeler component for the ability to communicate
with the Networkers of direct neighbors. 

```
Networker             Networker
   |                     ^
   |                     |
   V                     |
Channeler ----------> Channeler
```

This is done using the messages:

**ChannelOpened** (Channeler -> Networker)

- remotePublicKey


**ChannelClosed** (Channeler -> Networker)

- remotePublicKey


**SendChannelMessage** (Networker -> Channeler)

- remotePublicKey
- tokenChannelIndex
- messageContent

 
**ChannelMessageReceived** (Channeler -> Networker)

- remotePublicKey
- messageContent



ChannelOpened is a message sent Channeler to the Networker, notifying that a
new communication channel is available from the Networker to the Networker of a
remote node. ChannelClosed message means that the channel was closed.

SendChannelMessage is a message sent from the Networker to the Channeler,
allowing to send a message to a Networker of a remote neighbor.
tokenChannelIndex is a hint to the Channeler, specifying the index number of
the token channel used for the underlying message. 

In case the Channeler is using an implementation of multiple TCP connections,
the tokenChannelIndex hint can be used to help divide messages to different TCP
connections to the remote neighbor.

ChannelMessageReceived is a message sent from the Channeler to the Networker,
notifying about the receipt of a new message from a Networker of a remote
neighbor.


Note that synchronization issues are possible: It is possible that the
Networker is sending a SendChannelMessage to the Channeler, while at the same time
the Channeler is sending a ChannelClosed message to the Networker. 

It might happen that the Networker and the Channeler have seen the events in
different order: The Channeler closed the TCP connections before the message
could be sent, while the Networker believes that he sent the SendChannelMessage
message to the Channeler before the channel was closed.

This is not a problem though, because the Networker uses token based communication.
The Networker always remembers the last message he attempted to send over a
token channel. If later the Networker finds that the remote Networker did not
received the message, it will send it again.

The Networker has the responsibility of configuring the Channeler.
This is done using the following messages:


**AddNeighborRelation**

- neighborPublicKey
- socketAddr (Optional)
- maxChannels

(TODO: This message is not exactly the same as the one in `inner_messages.rs`)

**RemoveNeighborRelation**

- neighborPublicKey


**SetNeighborMaxChannels**

- neighborPublicKey
- maxChannels


The message AddNeighborRelation allows to add a new neighbor with a few
parameters. neighborPublicKey is the public key of the remote neighbor.
socketAddr is an optional field, containing the remote IP and port of the
neighbor, used for TCP connection. If this field is left blank, the remote
neighbor is expected to know our address and initiate connection.
maxChannels should match the amount of token channels used to communicate with
this neighbor. This number will be used internally by the Channeler to optimize
the communication for the transport of token channels.

The message RemoveNeighborRelation removes a neighbor according to its public
key. The message SetNeighborMaxChannels changes the amount of maxChannels
parameter.


## Basic Networker configuration


The networker can be configured through the PluginManager component using the
following messages:


**AddNeighbor**

- neighborPublicKey
- socketAddr
- channelCapacity
- maxTokenChannels


**RemoveNeighbor**

- neighborPublicKey


**SetNeighborChannelCapacity**

- neighborPublicKey
- channelCapacity


**SetNeighborMaxTokenChannels**

- neighborPublicKey
- maxTokenChannels


The Networker's configuration is forwarded to the Channeler, in the form of the
corresponding messages: AddNeighborRelation, RemoveNeighborRelation,
SetNeighborMaxChannels.  Note that the Channeler is not given information about
channelCapacity of the token channels.

The Networker's configuration does not persist (It is kept on RAM). Therefore
the Networker has to be configured every time it is started through the
PluginManager component.


## Service provided by the Networker

The IndexerClient, Pather, Funder and PluginManager components rely on the
Networker for networking service. That is: For sending and receiving messages
to and from remote nodes.


### NetworkerSenderClient

The following interface is used for sending messages to a remote node:


**RequestSendMessage** (User -> Networker)

- requestId                     [16 bytes]
- nodeIdPath
- requestContent 
- maxResponseLength             [4 bytes]
- processingFeeProposal         [8 bytes]
- halfCreditsPerByteProposal    [4 bytes]

Where the fields in this message have the same description as the fields in the
RequestSendMessage transaction.

The following message will return from the Networker:

**ResponseSendMessage** (Networker -> User)

- requestId
- one of:
    - Success(responseContent)
    - Failure


It is possible that the request to send a message will block indefinately.
A timeout should be used by the user of the Networker interface to avoid
waiting for the delivery of a message forever.


### NetworkerReceiverClient

The following interface is used for receiving messages from remote nodes:


**RequestReceived** (Networker -> User)

- requestId
- nodeIdPath
- requestContent 
- maxResponseLength             [4 bytes]
- processingFeeProposal         [8 bytes]
- halfCreditsPerByteProposal    [4 bytes]


**RespondRequestReceived** (User -> Networker)

- requestId
- one of:
    - Respond
        - responseContent
    - Discard


### NetworkerSimpleReceiverClient

The following interface is used for receiving messages from remote nodes using
a simple interface. 

When using this interface messages need not be approved by the receiver. The
Networker automatically responds with an empty response to all valid incoming
requests. The requestContent is then passed to the client. This allows faster
processing but less control for the client.


**RequestReceived** (Networker -> User)

- remotePublicKey
- requestContent 


## Multiplexing Networker messages

Messages received by the Networker might need to be forwarded to any of the
components: IndexerClient, Funder, PluginManager. 

The first byte of a request received by the Networker allows the Networker to
decide which component should receive a message. This byte is called the
muxByte.

The Networker allows to generate new receiver clients
(NetworkerReceiverClient and NetworkerSimpleReceiverClient) that are registered
on a specific muxByte value. The mentioned components are registered on the
following muxByte values:

- 0: IndexerClient
- 1: Funder
- 2: PluginManager

For example, a message with requestContent beginning with the byte `1` will be
forwarded to the Funder. The funder will receive the requestContent stripped
from the muxByte (the first byte).


## Sending funds using Funder

TODO: 

- How to send funds using Funder
- How do funder receipts look like?


## Protocol against database

TODO
- What should be persisted?
- How to do this?
    - sqlite3?
    - transactions and safety against forced shutdown.


