# Channeler design
14.08.2018


## Introduction

The Channeler is the CSwitch component allowing secure communication.
It passes messages between Funders securely over any datagram based
communication channel. It works even if the underlying communication channel
sometimes drops messages, or when messages arrive out of order.

Every node in the CSwitch is directly connected to a few **friends**. Those are
other CSwitch nodes in the network. Those direct friends connections are
configured by the users of the CSwitch nodes. For two nodes to be friends in
the CSwitch network, the users of both nodes need to configure their CSwitch
nodes to connect to each other. Having only one user configuring his node is
not enough to set up a direct friend connection between nodes.

The direct friends connections between nodes should allow to send credits
from any node A to any other node B in the CSwitch network, even if the two
nodes A and B are not directly connected as friends. In such a case, credits
sent from A to B will be forwarded along a route of friends from A to
B. The nodes along the route will be payed credit for their effort in
forwarding the funds.

Messages that arrive at the Channeler from the outside have the following form:
`(src_address, src_public_key, content)`

Dually, messages that are sent from the Channeler to the outside have the
following form:
`(dest_address, dest_public_key, content)`


## Configuring friends

The Channeler component is configured from the outside using the following
messages:

**AddFriendRelation**

- friendInfo
    - friendAddress
        - friendPublicKey
        - Option(Address)
    - maxChannels

(Note that the Channeler should be generic over the Address type)

**RemoveFriendRelation**

- friendPublicKey


AddFriendRelation allows to configure a new friend. The
Channeler is given addressing information about the new friend: The public
key of the remote friend, and an optional Address. Address is generic type.
Channeler is oblivious to the contents of Address. 

Note that Address is optional. This is because it is possible that in a friend
relationship between two CSwitch clients, only one side knows the address of
the other. 

This could happen, for example, if one side is a home PC, and the other side is
a VPS (Virtual Private Server). The server has a dedicated IP address, but the
home PC is given a different IP address every period of time from its ISP. 
In this case the home PC will fill in the socketAddress to be the IP address of
the VPS server, while the VPS server will leave the socketAddress field blank.
This means that TCP connections between the home PC and the VPS server will be
initiated by the home PC.

RemoveFriendRelation removes a friend relation given the friends public
key.

The Channeler does not have any method of persisting information. This means
that all of his configuration is saved on RAM memory. If the CSwitch client is
restarted, it needs to be reconfigured.


## Messaging interface

```rust

// Channeler -> Funder
pub struct MessageReceived {
    pub remote_public_key: PublicKey,
    pub message_content: Bytes,
}

// Funder -> Channeler
pub struct SendMessage {
    pub remote_public_key: PublicKey,
    pub content: Bytes,
},
```

The Funder can send a message to a remote Funder over by sending SendMessage to
the Channeler. The Channeler will do its best effort to send this message,
however, it is possible that the message will not arrive. 


## Implementation of secure communication

See `theory/udp_encryption.mdown`


## Keepalives

A Channeler should attempt to open a secure channel to a remote Channeler every period of time.
In addition, once the secure channel was opened, a message must be sent over
this channel every certain period of time. If no user message is sent through a
channel, the Channeler will send a dedicated Keepalive message to the remote
side.

If a remote side does not send any message over a channel for a long period of
time, the local Channeler will attempt to open a new secure channel to the
remote Channeler.

