
# CSwitch motivation and general idea

02.12.2017

## Introduction

CSwitch is an international communication infrastructure. It allows nodes
to send data packets to each other. To allow fair usage of the networking
resources, CSwitch allows a means of transferring credit between its
nodes.

Differently from the current design of the Internet, sending data packets over
the CSwitch network costs some credit for the sender. This credit is split
between the mediators of the message, and the end receiver. 

The sender, by sending a message, makes other nodes in the network perform work
for him. The mediators need to pass the message, and the receiver of the
message has to open the message and confirm the message receipt.  The credit
paid by the sender of the message is a sort of compensation for all the nodes
involved.

In the CSwitch design, nodes that pass messages through them earn credit. This
could incentivize people that are located in key geographical locations to
build communication infrastructure. In the current Internet only priviledged
people are allowed to start a new ISP (Internet Service Provider). CSwitch
allows anyone to be part of the communication infrastructure and earn credit
for his contribution.

Another advantage is resiliency against DoS (Denial of Service) inside the
CSwitch infrastructure. On the Internet, if a computer receives many data
packets he could be overloaded and as a result, stop being able to provide
service.  On the CSwitch infrastructure, sending many messages to a remote node
costs credit. In addition, a node that is bombarded with many messages earns
credit. 


## Ability to send funds implies ability to send messages

Consider this abstract idea: The abilities to send funds between nodes is
related to the ability to send messages between nodes. 

In particular, if we have a network where sending funds between nodes could be
performed efficiently, it is possible to create a mechanism to send messages
efficiently between nodes. This could be done as follows:

To send a message bit from node `A` to node `B`, `A` could send a `B` 1 credit
to represent the bit `0`, and 2 credits to represent the bit `1`. This
mechanism should also allow `B` to send messages to `A`. If `A` and `B` send
about the same amount of bytes to each other, on average none of them should
ever run out of funds to be able to send communication.

This of course is a very abstract idea, but it shows that ability to send funds
implies ability to send messages. 


## Blockchain solutions for passing value are not efficient

The CSwitch infrastrucure allows every node to send a message to a remote node
for a small fee. One could suggest to use a blockchain system, like Bitcoin, to
manage the transfer of funds between nodes (Those funds are the payment for
sending messages).

Direct blockchain based payment for every message sending is very inefficient,
as a blockchain based transaction involves communication to the whole
participants of the network.

One could suggest instead that nodes remember the debt between them, and settle
the payment at a later time using a blockchain based transaction. In the next
sections we take this idea further, and remove the requirement for a blockchain
based transaction to settle the debt.


## Mutual credit clearing

Assume that two business owners, a milkman and a baker, live next to each
other. Also assume that they live in a world without money.

One way the milkman and the baker could exchange goods without the use of money
is using the method of barter. the milkman could ask the baker from some break,
in exchange for some milk.  However, what if at a specific time the milkman
wants to get some bread from the baker, but the baker doesn't need any milk
from the milkman? In this case, the method of barter will not allow to perform
a transaction. Barter only works if the two involved parties are interested in
the exchange in a specific point in time and location.

To solve the problem, the milkman and the baker could use **mutual credit
clearing**: If the milkman wants to get bread from the baker, but the baker
doesn't need any milk right now, the baker will give the milkman a loaf of
bread, and write down on a piece of paper that the milkman owes him some
credit. The milkman will also write a similar note for reference.

A few days later later, if the baker wants to get milk from the milkman, but
the milkman doesn't want any bread from the baker at that specific point of
time, the baker could use his credit at the milkman to get milk. After the
milkman gives the baker a bottle of milk, the debt of the milkman to the baker
is cleared.

This method allows the milkman and the baker to perform exchange of their
goods, even if they do not want to exchange them at exactly the same time. 

One assumption that mutual credit clearing makes is that the milkman and the
baker trust each other. Suppose that the milkman takes 5 loafs of bread from
the baker. The milkman and the baker both write a note that the milkman ows the
baker credit that equals 5 loafs of bread. What if the milkman is gone one day,
without ever repaying the debt to the baker? The baker is left with a note that
the milkman ows him credit, but this note can not be redeemed anywhere for
goods.

The baker, by allowing the milkman to have debt to him, trusts that the milkman
will stick around to be able to pay back the debt in the future, in some way.

Some measures to be taken when using mutual credit clearing:

- Mutual credit clearing should only be set up between people that trust each
    other. It is advantage if those people know each other from the real world,
    and they have met in person.

- The maximum debt possible in the mutual credit clearing between two sides
    should be limited to some maximum amount. For example: If the baker allows the milkman to owe
    him credit of value at most 3 loafs of bread, the baker will not be able to lose
    more than 3 loafs of bread if A can't repay the debt.


Given these assumptions, the state of mutual credit between two nodes A and B
consists of the following parameters:

- A allows B maximum debt of md{AB}
- B allows A maximum debt of md{BA}

md{BA} and md{AB} are not necessarily equal. Drawn on a one dimensional scale,
we get a picture as follows (from the point of view of A):

```
                     d{AB}
     [-----------|-----^-------]
  -md{BA}        0           md{AB}
```

In the picture, B owes A some amount of money. The `^` marks shows the current
credit relationship between A and B. The value d{AB} is the mutual credit state
between A and B. It denotes the purchasing power of A with respect to B. It is
always true that `-md{BA} <= d{AB} <= md{AB}`. Note the symmetric property:
`d{AB} = -d{BA}`.

From the point of view of B, the picture looks as follows:

```
            d{BA)
     [-------^-----|-----------]
  -md{AB}          0         md{BA}
```

In the CSwitch architecture, we call such a pair of identities A and B **friends**.
A pair of friends represents a trust relationship in the real world between two
people.

The economy of mutual credit clearing between two people is simple, and it
requires that each side generates goods that the other side wants. In the
example above, the milkman wants to get bread, and the baker wants to get milk.
This does not always happen in the real world. 

If, for example, the baker decided to stop drinking milk (Maybe he got
allergic?), the simple mutual credit clearing between the milkman and the baker
will not keep working. After a few loafs of bread that the milkman takes from
the baker for credit, the baker will not allow the milkman to take any more,
because the debt is too large.

This problem could be solved if the baker possibly wanted to buy service from
the carpenter, assuming that the carpenter buys milk from the milkman. This
will usually happen in an economy of multiple players.


## Chains of mutual credit clearing

To extend the idea of credit clearing to the economy of multiple players we use
chains of mutual credit clearing. In this setting, every person has a few other
people he trusts, and maintains mutual credit clearing with.

Assume that a person A wants to send funds to another person B. If A and B
are friends (They directly manage mutual credit clearing), the transaction is
simple: A will decrease d{AB} and B will increase d{BA}. 

If A and B are not friends, they need the help of a mediator, or a chain of
mediators, to perform the transaction. A and B will look for a chain of the
following form:

```
A -- M1 -- M2 -- M3 -- B
```

Where A, M1 are friends, M1, M2 are friends, M2, M3 are friends and M3, B are
friends. Of course, the length of the chain could be arbitrary.

To transfer funds from A to B, A will first transfer funds to M1, M1 and will
transfer the funds to M2, M2 will transfer the funds to M3 and M3 will transfer
the funds to B. Each mediator (M1, M2, M3) can take a little amount of funds
for himself during the transaction, in exchange for helping A and B perform the
transaction.

We assume that friendship between people in the real world should allow any two
strangers A,B to find a chain of friends that connects them, to allow transfer
of funds between A and B. If no such chain is found, transfer of funds will not
be possible.


## Buying communication for credit

We showed above how funds could be transferred between nodes that are not
friends (They do not have a direct mutual credit clearing setup). We could use
a similar idea for the transfer of communication between nodes.

Assume of network of nodes, where every node is directly connected to some other
predefined nodes. If A and B are two directly connected nodes, we say that A
and B are **neighbors**. 

Note that being neighbors is not the same as being friends. Being neighbors
means being adjacent in the network topology. It does not imply the trust
required for being friends. Hence the network of neighbors (Used for transfer
of communication) is independent of the network of friends (Used for the
transfer of funds).

If A wants to send a message to some remote node C, A first finds a path from A
to C that goes along neighbors. For example:

```
A -- N1 -- N2 -- C
```

In the picture, A and N1 are neighbors, N1 and N2 are neighbors and N2 and C
are neighbors. This means that there is a direct communication channel from A
to N1, from N1 to N2 and from N2 to C. We will pass the message from A to C
along this path of neighbors.

To send the message, A prepares a message together with payment to the
mediators N1, N2, and to the recipient C. The mediators will pass the message
and earn some amount of credit for their services.


How can A pay N1? A and N1 maintain mutual credit clearing with very small
maximum debt amounts. 

There is no real world relationship between A and N1, hence they can not trust
each other to repay large debts. However, A and B can set up mutual credit
clearing for very small amounts.

Generally this setup of small mutual credit clearing should be sustainable if A
and B send similar amounts of messages through each other. However, if for
example A sends many messages through B and reaches the maximum debt B allows,
A will send B funds using a chain of friends from A to B. 

The mutual credit between two neighbors represents communication purchasing
power. If A and B are neighbors, A will try to ensure that it is not too close to
the maximum debt possible to B, and B will try to ensure it is not too close to
the maximum debt possible to A.

If for example, A notices that it is getting close to the maximum debt possible
to B, it will send funds to B through a chain of friends. The funds should be
approximately enough to balance the mutual credit between the neighbors A
and B.

As a summary: large amounts of credit passes using chain of friends, and
neighbors maintain mutual credit for very small amounts, used mostly for the
purchase of communication ability.


## Atomicity and incentives during transactions

In the previous sections we showed that transfer of funds between
two nodes could be accomplished by "pushing" credit along a chain of friends.
On the communication layer, we showed that communication between two nodes is
accomplished by sending messages together with credit along a chain of neighbors.

To examine the security of this setup, we need to consider the incentives of
the nodes participating in the transaction. In this section we observe a
transcation done in the communication layer, between neighbors. The
considerations for a transaction done in the funds layer (between friends)
should be similar.

TODO


## The problem of distributed routing


TODO




