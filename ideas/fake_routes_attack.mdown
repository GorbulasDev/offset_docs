# Fake Routes attack and failure response incentives
08.08.2018, by real
Attack reported by BronzeAge.


## Intro


CSwitch basic exchange technology works by sending a request along a path of
nodes, from source to destination, followed by the transmission of a signed
response along the reversed path: from the destination to the source.

```
B -- C -- D -- E -- F
```

In the figure above: B sends a request all the way to F. 
When the request is sent from B to F, nodes freeze credits. The frozen credits
are a promise for future payment. (B promises to pay to C, C promises to pay to
D, D promises to pay to E, E promises to pay to F).

After F receives the request, he creates a signed response and sends it along
the reversed route, all the way to B. When E receives the signed response, he
pays the credits he promised to F. Similarly, D pays to E, C pays to D and B
pays to C. This works well when the request arrives F successfuly.

A question arises regarding what is the correct thing to do in case it is not
possible to deliver the request to its destination. For example, if B attempts
to send a message to F, it is possible that a failure occured at E, and
therefore D can not pass the message on. Instead, it will return a failure
message to C, which will return the failure message to B.

```
 ---Request-->
 <--Failure---
B  --  C  --  D  -x-  E  --  F
```

In the figure above: B sends a request to F, but D can not pass the message to
E. Therefore D reports failure back to C, and C forwards the failure message
back to B. In that case C pays a small fee to D, and B pays a small fee to C.
The fee is smaller than the fee that B would have paid on success, therefore
the mediator nodes should want to pass the message successfuly instead of
returning a failure.

Recently a design flaw was found in this design. This document explains the
flaw found in the design of failure fees, and discusses various possiblities of
solving this issue.


## Fake Routes attack

Consider the case of a node B that wants to send a message to a node F.
B will first request a route of neighbors from B to F from an Indexer. The
indexer will then return a route from B to F. B will then use the provided
route to send a message to F.

The Indexer chooses a route for B by picking a cheap or possibly short route
from B to F. As a result, an Adversary can advertise a cheap route from B to F,
and the Indexer will return this route to B with high probability. B will then
attempt to send a message to F along this route, and the adversary will be able
to return a Failure response to B, and earn credits as a result.

```
B -- C1 -- C2 -- C3 -- C4 -- C5 -- F
      \                     /
       E1   --    E2  ==   E3
```

In the above figure: The route `B -- C1 -- C2 -- C3 -- C4 -- C5 -- F` is a long
route between B and F. The nodes E1, E2, E3 belong to the adversary. The
adversary manages to obtain neighborhood contact with C1 and C5 using the nodes
E1 and E3. The adversary can then report to Indexers The connections: `E1 -- E2
-- E3`, with very cheap pricing for those links, while those links do not
really exist. 
As a result, when B asks for a route to the node F, the Indexer will prefer to
give B the route `B -- E1 -- E2 -- E3 -- C5 -- F` over the more expensive route
`B -- C1 -- C2 -- C3 -- C4 -- C5 -- F`.

Finally, B will attempt to send a message to F, the messages will arrive at E2
and E2 will report back a failure. As a result, the adversary will earn
credits, and B will lose credits.

Also note that the adversary can create infinitely more nodes
like E2, connected both to E1 and E3 with very cheap links. This might make
blacklisting E2 difficult.

Many other nodes (like B) can obtain a route that involves the links `E1 -- E2
-- E3` from the Indexer, because those links are cheap. This will allow the
adversary to earn many credits by reporting failures for all (or most) requests
routed through `E1 -- E2 -- E3`.

We call this attack the **Fake Routes** attack.


Allowing the Fake Routes attack will cause users to lose trust in routes
obtained from Indexers, as many scammers might create fake routes in order to
obtain credits from failure responses.


## Summary of solution ideas

A short summary of the main ideas for mitigating the Fake Routes attack is
included here. The ideas are explained in detail later.

- Return many different routes from an Indexer
- Report failures to Indexers.
- Using relations between Friends for trust
- Monitor link quality locally
- Removing failure responses from the protocol
- Turn failures to be expensive for mediators


### Return many different routes from an Indexer


An adversary running the Fake Routes attack causes an Indexer to return his
fake routes to many nodes that request routes. This happens because the
adversary's fake routes are cheap and short, therefore they look like better
routes for the Indexer.

We might be able to change the algorithm used by the Indexer so that it is less
likely that a fake route is chosen.

Possible algorithms to use at an Indexer when finding a route from B to F:

- Generate a random node T, then find a route from B to T, and from T to F.
    Finally combine the two routes and return the resulting route.

- Find a few disjoint routes from B to T, and return all of them.

- Pick a few different neighbors of B, and find a route from each of those
    neighbors to F. Return all the routes found.


It turns out that using the above methods do not mitigate the Fake Routes
attack. Cheap routes between two B and a random node T are likely to encounter
a fake route. 


### Report failures to Indexers

Consider a node B that obtained a route from B to F from an Indexer.
If B sends a message to F and receives back a failure from some node in the
middle, B can take the signed failure message and send it back to the Indexer.
The Indexer might send B credits for this information, or give a different
route from B to F instead.

Implementing this requires that an Indexer will have a random based time
stamp (A random value that changes every constant interval of time).
Whenver a route is returned from the Indexer, it will also contain a time
stamp. The time stamp will be somehow included inside the message sent to the
destination. The signature over the failure message will also sign over this
time stamp, and so the failure message could be used as a proof for the node B
that a recently obtained route from B to F does not work as intended.

An issue when implementing this mechanism is that a failure might happen
due to other reasons. For example, it is possible that forwarding a message is
not possible because of freezing DoS protection (Discussed in
`funder_credit_switching.mdown` document), or because of an attempt to send a
very large message.

Those cases can not be tracked and authenticated by the Indexer, and so reports
of failures to the Indexer may not always be accurate or justified.

Another issue with this solution is how will the Indexer use the information
obtained by the failures. The Indexer knows about the failures, but he can not
know for sure who in the route is responsible for the failure. (This happens
because the adversary might own more than one node along the route).

One possibility is to have some kind of reputation maintained by the Indexer
for every link. Whenever a failure happens and reported to the Indexer, the
reputation of all links along the route decreases. Currently we do not know of
a good way to do this. Another problem is that the Indexer can not account for
all the successful requests along this route.


### Using relations between Friends for trust

The Indexer has all the trust relationship between nodes in the network as the
amount of credits trusted by friends. It might be possible to use this
information to go over routes that are "more trusted" than others. We currently
do not know of a method of doing that.


### Monitor link quality locally


Nodes can monitor their neighbors and evaluate statistics for success/failure.
Consider for example the following network layout:


```
.. -- B -- C -- ..
```

B will try to evaluate the quality of the link `B -- C` by observing requests
sent through `B -- C`. (Possibly from behind B to a destination after C). Every
request should result in a success or failure. The requests should probably be
weighted according to the amount of bytes inside of them.

B could keep a window of the last 0x100 requests and responses. If the
statistics show that there is a high rate of failures, B could do one of the
following:

- Disable the link with C, or remove neighbor relationship with C.
- Report to an Indexer (How can the Indexer verify this report?)
- Increase the fee required to send a message from B to C. This information is
    updated with the Indexer.

It is still unknown if this solution performs well against other types of
malicious behaviour. For example, a remote node might send (on purpose) many
requests along a route that goes through `B -- C` and fail. This will effect
B's statistics for the route `B -- C`. 

If B's statistics are sent to an Indexer, how can the Indexer verify that the
statistics are valid? Does B has an incentive to report high or low statistics
to the Indexer? What happens if two adjacent nodes report contradicting
statistics about a route? How can the Indexer know who is correct?


## Removing failure message from the protocol

It seems like failure messages might be the root of the problem with the Fake
Routes attack. One possible solution is to eliminate failure messages from the
protocol. This means that when a request is sent along a route, only a success
response is acceptable. This turns the Fake Routes attack to be unprofitable
for the attacker.

However, if a request can not be delivered, credits will be frozen forever.  If
many requests that can not be delivered are sent through a certain link, the
link will be clogged with frozen credits and it will be impossible to send new
requests through this link.

Example:

```
B -- C -- D -- E -x- F
```

In the figure above: If B sends a request to F, but E can not deliver the
message to F, the frozen credits along the route can not be unfrozen.
After a while the links on the route between B and F can be clogged.

We might need some way to periodically clean up the clogged links, possibly by
reset, but this requires human intervention. It is not known at this time how
to resolve the unfreeze problems.


## Turn failures to be expensive for mediators

In the current design of CSwitch mediators earn credits both in the cases of
a success response or failure response. It makes sense that mediators earn
credits in the case of success, and the sender of the source of the request
pays those credits. However, it is less obvious that mediators should earn
credits (Less than the case of success) in the case of a failure.

The original reason for having mediators earn money in the case of failure was
to avoid the possibility of sending messages for free between two ends that
belong to the same entity.

We now consider a few schemes for compensation in the case of failure, and try
to understand their consequences.

(1) **Mediators earn credits**: During failure the Source loses credits, the mediators and the
reporter of failure earn credits. This is the design we currently use.

```
B -- C -- D -- E -x- F
-    +    +    +
```

In the figure above, B attempts to send a message to F along the route `B -- C
-- D -- E -- F`, but a failure is reported by E and sent back all the way to B
along the reversed route. We mark by `-` the state of losing credits, and by
`+` the state of earning credits.

This scheme allows the Fake Routes attack, because mediators earn credits
during failure.


(2) **Sender earns credits**: During failure the sender earns credits, and the
   mediators lose credits.


```
B -- C -- D -- E -x- F
+    -    -    -
```

In this case the Fake Routes attack is not profitable for the attacker.
However, a different problem arises. The source of a request (B) can send
deliberately requests to nonexistent nodes. For example, B could send a request
along the fake route `B -- C -- D -- G`. The node G does not exist, therefore D
will have to report failure, and as a result C and D will lose credits, and B
will earn credits. It is still not known how to mitigate this problem.


(3) **No credits earned**: During failure no credits are lost or earned


```
B -- C -- D -- E -x- F
0    0    0    0
```

In the figure above, we denote by `0` the fact that no credits were lost or
earned. 

In this case it is also not profitable to perform the Fake Routes attack,
because mediators don't earn credits. However, it is still possible for B to
invent fake routes and send requests along those routes, same as in the
previous "Sender earns credits" case. 

B can send a request to C along a fake route `B -- C -- D -- G`, where G does
not exist. This way B causes C and D to perform networking work by sending only
one message. B could use an even longer fake route to cause many nodes to
perform networking work.

It is a strange thing for B to do, because it costs networking work for B,
however B might do this for some reason.

A major issue with this solution is that it allows sending messages from B to E
for free. If B and E cooperate, B could pretend to send messages to F. E then
receives the messages and reports failure. Using this method B and E can
transfer information without paying for the mediators: C and D.

(4) **Failure reporter loses credits**: During failure the failure reporter
loses credits. All other nodes earn credits.


```
B -- C -- D -- E -x- F
+    +    +    -
```

In this case B can send requests along fake routes and earn credits.

(5) **Failure reporter earns credits**: During failure the failure reporter
earns credits. All other nodes lose credits.


```
B -- C -- D -- E -x- F
-    -    -    +
```

In this case the Fake Routes attack is still profitable for an attacker.


## Invalid schemes for failure incentives

Note that some schemes are not possible to implement securely on a decentralized setting.
For example, a hollow scheme:

```
B -- C -- D -- E -x- F
+    0    0    -
```

Is not possible to implement securely. An adversary could split E into two
nodes E1 and E2, changing the layout into:

```
B -- C -- D -- E1 -- E2 -x- F
+    0    0    0     -
```

This will allow the adversary to not lose credits.
A dual argument goes for the following hollow layout:

```
B -- C -- D -- E -x- F
-    0    0    +
```

An adversary would split B into two nodes B1 and B2, changing the layout into:

```
B1 -- B2 -- C -- D -- E -x- F
-     0     0    0    +
```

This will allow the adversary to not lose credits.


Also note that all schemes proposed here sum up to 0, because the CSwitch
economy is a zero sum economy. The sum of all credits of a subset of nodes in a
closed system can not change.


## All participants lose in case of failure

A scheme we have not yet discussed for the case of failure is a scheme where
all of the participants lose in the case of failure: Both the source of the
message and the mediators.


```
B -- C -- D -- E -x- F
-    -    -    -
```

In the figure above: B attempts to send a message to F along the route `B -- C
-- D -- E -- F`. A failure is reported by E, and a failure response is passed
back to B all the way along the reversed route.

If we could somehow make all participants lose credits in the case of failure,
we manage to overcome all the problems previously mentioned:

- Fake Routes attack becomes not profitable for an attacker, because in this
    scheme mediators lose credits in case of failure.

- The source (B) will not attempt to send requests along fake routes, because the
    source loses credits in case of failure.

- It is not possible to send messages for free from B to E, because B and E
    have to pay credits for sending a message.



However, the subset of nodes {B,C,D,E} is a closed system, and therefore it
is not possible that all of them will lose credit at the same time.

One possiblity to implement this state could be using **proof of work**: In case of
failure, all nodes {B,C,D,E} will have to solve a proof of work puzzle,
otherwise credits from the request will stay frozen. Solving the proof of work
puzzle will unfreeze the credits.

Another possiblity is to use a neutral party. Every pair of nodes with a link
between them can define a neutral party. In case of a failure, both parties
will send some amount of credits to the neutral party. Note that different
pairs of nodes will usually have different neutral parties.

Given a link `B -- C`, a neutral party should be a node that is not related to
B or C. If for example the neutral party belogs to the owner of B, whenever B
sends credits to the neutral party the owner of B doesn't lose credits!

The neutral party should be chosen during configuration of a new neighbor, and
should be agreed upon by both sides.

A proof of payment to the neutral party could be provided in the form of a
receipt. 


Note that the proof (Both proof of work, or proof of payment to a neutral
party) does not have to be provided immediately when returning a failure
response. It could be provided later at a later time, unfreezing the frozen
credits between a pair of nodes. If no proofs are provided for a long period of
time, the link between the pair of nodes will be clogged with frozen credits.


The idea of neutral party has some disadvantages:

- How can two nodes decide on a neutral party? (Maybe people should provide a
    service of trusted third parties?)

- What happens if the neutral third party is offline at a certain time? Maybe
    we should declare more than one neutral third party? Maybe use proof of
    work as a fallback?

